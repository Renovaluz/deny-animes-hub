const db = require('../models');
const sendEmail = require('../utils/sendEmail');
const ejs = require('ejs');
const path = require('path');

// FunÃ§Ã£o principal que dispara as notificaÃ§Ãµes
const sendNotification = async (anime, episodio = null) => {
    try {
        // 1. Busca todos os usuÃ¡rios que optaram por receber notificaÃ§Ãµes
        const subscribers = await db.User.findAll({
            where: { receberNotificacoes: true },
            attributes: ['email'] // Pega apenas o e-mail para ser mais eficiente
        });

        if (subscribers.length === 0) {
            console.log("Nenhum usuÃ¡rio inscrito para notificaÃ§Ãµes.");
            return;
        }

        const emails = subscribers.map(user => user.email);

        // 2. Define o tipo de notificaÃ§Ã£o e o link de destino
        const tipoNotificacao = episodio ? 'Novo EpisÃ³dio DisponÃ­vel' : 'Novo Anime Adicionado';
        const urlDestino = episodio
            ? `${process.env.APP_URL}/assistir/${anime.slug}/${episodio.id}`
            : `${process.env.APP_URL}/anime/${anime.slug}`;

        // 3. Renderiza o template EJS para HTML
        const emailHtml = await ejs.renderFile(
            path.join(__dirname, '../views/email/notificacaoAnime.ejs'),
            {
                anime,
                episodio,
                tipoNotificacao,
                urlDestino,
            }
        );

        // 4. Envia o e-mail para todos os inscritos
        await sendEmail({
            to: emails, // Nodemailer aceita um array de e-mails
            subject: `ðŸ”¥ ${tipoNotificacao}: ${anime.titulo}`,
            html: emailHtml
        });

        console.log(`NotificaÃ§Ã£o enviada com sucesso para ${emails.length} usuÃ¡rios.`);

    } catch (error) {
        console.error("Erro ao enviar notificaÃ§Ã£o por e-mail:", error);
    }
};

module.exports = { sendNotification };

APP_URL=https://deny-animes-hub.onrender.com/

    // No topo do arquivo
    const { sendNotification } = require('../services/notificationService');

    // Dentro de `createAnime`
    exports.createAnime = async (req, res) => {
        try {
            // ... (toda a sua lÃ³gica de criaÃ§Ã£o do anime)
            const newAnime = await db.Anime.create({ /* ...dados do anime... */ });

            // Dispara a notificaÃ§Ã£o apÃ³s o anime ser criado com sucesso
            // Usamos um 'setImmediate' para nÃ£o bloquear a resposta da API
            setImmediate(() => {
                sendNotification(newAnime.get({ plain: true }));
            });

            res.status(201).json({ success: true, data: newAnime });
        } catch (error) {
            // ... (seu tratamento de erro)
        }
    };


    // No topo do arquivo
    const { sendNotification } = require('../services/notificationService');

    // Dentro de `createEpisodioViaLink` ou `createEpisodioComUpload`
    exports.createEpisodioViaLink = async (req, res) => {
        try {
            const { animeId, /* ...outros dados... */ } = req.body;
            const anime = await db.Anime.findByPk(animeId);

            if (!anime) {
                return res.status(404).json({ success: false, error: 'Anime nÃ£o encontrado.' });
            }

            const newEpisodio = await db.Episodio.create({ /* ...dados do episÃ³dio... */ });

            // Dispara a notificaÃ§Ã£o passando o anime e o novo episÃ³dio
            setImmediate(() => {
                sendNotification(anime.get({ plain: true }), newEpisodio.get({ plain: true }));
            });

            res.status(201).json({ success: true, data: newEpisodio });
        } catch (error) {
            // ... (seu tratamento de erro)
        }
    };