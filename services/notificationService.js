'use strict';
const db = require('../models');
const sendEmail = require('../utils/sendEmail');
const ejs = require('ejs');
const path = require('path');

/**
 * Envia notifica칞칫es por e-mail para todos os usu치rios sobre novos animes ou epis칩dios.
 * @param {object} anime - A inst칙ncia do modelo Anime.
 * @param {object|null} episodio - A inst칙ncia do modelo Episodio (opcional).
 */
const sendNotification = async (anime, episodio = null) => {
    console.log("--- INICIANDO PROCESSO DE NOTIFICA칂츾O EM MASSA ---");
    if (!anime || !anime.titulo) {
        console.error("ERRO DE NOTIFICA칂츾O: Objeto 'anime' inv치lido ou sem t칤tulo.");
        return;
    }

    try {
        // Busca TODOS os usu치rios para notifica칞칚o
        const allUsers = await db.User.findAll({
            attributes: ['email']
        });

        if (allUsers.length === 0) {
            console.log("--- PROCESSO DE NOTIFICA칂츾O ENCERRADO (SEM USU츼RIOS REGISTRADOS) ---");
            return;
        }

        const emails = allUsers.map(user => user.email);
        const tipoNotificacao = episodio ? 'Novo Epis칩dio Dispon칤vel' : 'Novo Anime Adicionado';
        
        const urlDestino = episodio
            ? `${process.env.APP_URL}/assistir/${anime.slug}/${episodio.id}`
            : `${process.env.APP_URL}/anime/${anime.slug}`;
        
        if (!process.env.APP_URL) {
            console.error("ERRO GRAVE: A vari치vel de ambiente APP_URL n칚o est치 definida! As URLs nos e-mails estar칚o quebradas.");
        }

        const emailHtml = await ejs.renderFile(
            path.join(__dirname, '../views/email/notificacaoAnime.ejs'),
            { anime, episodio, tipoNotificacao, urlDestino }
        );

        console.log(`Preparando para enviar notifica칞칚o para ${emails.length} e-mails...`);

        // [CORRE칂츾O DEFINITIVA] Envia um 칰nico e-mail para voc칡, com todos os outros usu치rios em c칩pia oculta.
        // Esta 칠 a maneira mais eficiente e segura de enviar e-mails em massa.
        await sendEmail({
            to: 'denyneves14@gmail.com', // O destinat치rio principal, para seu controle
            bcc: emails, // Todos os seus usu치rios recebem uma c칩pia sem ver os outros destinat치rios
            subject: `游댠 ${tipoNotificacao}: ${anime.titulo}`,
            html: emailHtml
        });

        // O console.log de sucesso j치 est치 dentro da fun칞칚o sendEmail.

    } catch (error) {
        // O erro detalhado j치 ser치 logado pela fun칞칚o sendEmail, aqui apenas registramos o contexto.
        console.error("!!! ERRO NO SERVI칂O DE NOTIFICA칂츾O: N칚o foi poss칤vel completar o envio de e-mails.", error.message);
    }
};

module.exports = { sendNotification };