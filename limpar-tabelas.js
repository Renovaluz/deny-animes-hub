// ====================================================================================
//
//              DenyAnimeHub - Script de Prepara√ß√£o de Ambiente (Vers√£o Definitiva)
//
// Descri√ß√£o:     Este script se conecta ao PostgreSQL, CRIA o banco de dados se
//                ele n√£o existir, e ent√£o apaga as tabelas para garantir uma
//                sincroniza√ß√£o limpa. √â a solu√ß√£o completa.
//
// Como usar:     1. Garanta que o servi√ßo PostgreSQL est√° rodando.
//                2. Execute no terminal: node preparar-banco.js
//
// ====================================================================================

'use strict';

const { Sequelize } = require('sequelize');
const pg = require('pg');
const path = require('path');
const env = process.env.NODE_ENV || 'development';
const config = require(path.join(__dirname, 'config', 'config.json'))[env];

// Valida√ß√£o cr√≠tica da senha
if (!config.password || config.password === 'SUA_SENHA_AQUI') {
    console.error("\n‚ùå ERRO CR√çTICO: Senha do banco de dados n√£o foi definida!");
    console.error("Por favor, edite o arquivo '/config/config.json' e substitua 'SUA_SENHA_AQUI' pela sua senha real do PostgreSQL.\n");
    process.exit(1);
}

const prepararAmbiente = async () => {
  const { database, username, password, host, port } = config;

  // Conex√£o inicial ao servidor PostgreSQL, mas SEM especificar um banco de dados
  const pool = new pg.Pool({
    user: username,
    password: password,
    host: host,
    port: port || 5432,
    database: 'postgres' // Conectamos ao DB padr√£o 'postgres' para poder criar o nosso
  });

  try {
    console.log(`üîå Conectando ao servidor PostgreSQL em '${host}'...`);
    const client = await pool.connect();
    console.log('‚úÖ Conex√£o ao servidor bem-sucedida.');

    const res = await client.query(`SELECT 1 FROM pg_database WHERE datname = '${database}'`);
    if (res.rowCount === 0) {
      console.log(`üóÇÔ∏è  Banco de dados "${database}" n√£o encontrado. Criando...`);
      await client.query(`CREATE DATABASE "${database}"`);
      console.log(`‚úÖ Banco de dados "${database}" criado com sucesso.`);
    } else {
      console.log(`üóÇÔ∏è  Banco de dados "${database}" j√° existe.`);
    }
    client.release();
    await pool.end();

    // Agora, conectamos ao DB do projeto para limpar as tabelas
    const sequelize = new Sequelize(database, username, password, { host, port, dialect: 'postgres', logging: false });
    
    console.log(`üîå Reconectando ao banco de dados "${database}" para limpeza...`);
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o para limpeza bem-sucedida.');
    
    console.log("üî• Apagando tabelas antigas para garantir uma funda√ß√£o limpa...");
    await sequelize.query('DROP TABLE IF EXISTS "ratings" CASCADE;');
    await sequelize.query('DROP TABLE IF EXISTS "comments" CASCADE;');
    await sequelize.query('DROP TABLE IF EXISTS "historicos" CASCADE;');
    console.log("‚úÖ Tabelas antigas apagadas com sucesso.");

    console.log('\n‚ú® Processo de prepara√ß√£o conclu√≠do! Voc√™ j√° pode iniciar seu servidor principal com "npm start".');
    await sequelize.close();
    console.log('üîå Conex√£o final com o banco de dados fechada.');

  } catch (error) {
    console.error('‚ùå Erro durante a prepara√ß√£o do ambiente:', error);
    if (error.name === 'SequelizeConnectionRefusedError' || error.code === 'ECONNREFUSED') {
        console.error('\nDICA: O erro "ECONNREFUSED" significa que o seu servidor PostgreSQL n√£o est√° rodando. Verifique se o servi√ßo do PostgreSQL est√° ativo no seu computador.');
    } else if (error.code === '28P01') {
        console.error('\nDICA: O erro "password authentication failed" significa que a senha em "/config/config.json" est√° incorreta.');
    } else {
        console.error('\nDICA: Um erro inesperado ocorreu. Verifique as configura√ß√µes de conex√£o e se o banco de dados n√£o est√° bloqueado.');
    }
  }
};

prepararAmbiente();