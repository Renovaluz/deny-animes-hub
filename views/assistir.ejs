<%
    // ==========================================================================
    //          LÓGICA DE PREPARAÇÃO (VERSÃO RIKUDŌ SENNIN - AUTOCONTIDA)
    // ==========================================================================
    // Toda a inteligência de conversão está aqui, garantindo que o arquivo sempre funcione.

    let urlPlayer = initialEpisode.urlVideo;
    let linksParaDownload = [];
    let podeBaixar = false;

    // Apenas episódios com uma URL válida podem ter opções de player ou download.
    if (initialEpisode.urlVideo) {
        
        // --- LÓGICA PARA UPLOADS LOCAIS ---
        if (initialEpisode.tipoVideo === 'upload') {
            podeBaixar = true;
            try {
                // Tenta interpretar a urlVideo como um JSON de múltiplas qualidades.
                const parsedQualities = JSON.parse(initialEpisode.urlVideo);
                if (typeof parsedQualities === 'object' && parsedQualities !== null && Object.keys(parsedQualities).length > 0) {
                    urlPlayer = Object.values(parsedQualities)[0]; // Player usa a primeira qualidade
                    for (const qualidade in parsedQualities) {
                        linksParaDownload.push({
                            qualidade: qualidade,
                            urlDownload: parsedQualities[qualidade]
                        });
                    }
                } else { throw new Error("JSON inválido ou vazio."); }
            } catch (e) {
                // Se não for um JSON, é uma URL única de upload.
                urlPlayer = initialEpisode.urlVideo;
                linksParaDownload.push({
                    qualidade: 'Padrão',
                    urlDownload: initialEpisode.urlVideo
                });
            }
        
        // --- LÓGICA MESTRE PARA GOOGLE DRIVE ---
        } else if (initialEpisode.tipoVideo === 'gdrive') {
            try {
                // Expressão regular para extrair o ID do arquivo de QUALQUER link do Google Drive
                const regex = /(?:drive\.google\.com\/(?:file\/d\/|open\?id=|drive\/folders\/))([a-zA-Z0-9_-]{25,})/;
                const match = initialEpisode.urlVideo.match(regex);

                if (match && match[1]) {
                    const fileId = match[1];
                    podeBaixar = true;
                    
                    // GERA A URL PARA O PLAYER (IFRAME)
                    urlPlayer = `https://drive.google.com/file/d/${fileId}/preview`;
                    
                    // GERA A URL PARA O BOTÃO DE DOWNLOAD (TELA DE CONFIRMAÇÃO)
                    const urlDownloadFinal = `https://drive.usercontent.google.com/download?id=${fileId}&export=download&authuser=0`;
                    
                    linksParaDownload.push({
                        qualidade: 'Google Drive',
                        urlDownload: urlDownloadFinal
                    });
                } else {
                    // Se o link do GDrive for inválido, não mostra nada.
                    podeBaixar = false;
                    urlPlayer = '';
                    console.warn("Link do Google Drive inválido, não foi possível extrair ID:", initialEpisode.urlVideo);
                }
            } catch(e) {
                console.error("Erro ao processar link do Google Drive:", e);
                podeBaixar = false;
                urlPlayer = '';
            }

        // --- LÓGICA PARA OUTROS SERVIÇOS ---
        } else if (['mega', 'mediafire', 'iframe'].includes(initialEpisode.tipoVideo)) {
            // Para estes, o link é o mesmo para player e download, e não há download direto.
            podeBaixar = (initialEpisode.tipoVideo !== 'iframe'); // iFrames não têm botão de download
            urlPlayer = initialEpisode.urlVideo;
            if (podeBaixar) {
                linksParaDownload.push({
                    qualidade: `${initialEpisode.tipoVideo.charAt(0).toUpperCase() + initialEpisode.tipoVideo.slice(1)}`,
                    urlDownload: initialEpisode.urlVideo
                });
            }
        }
    }
%>

<style>
    /* ESTILOS PROFISSIONAIS E COMPLETOS PARA A PÁGINA DO PLAYER, SEM OMISSÕES */
    :root { /* Fallbacks para variáveis CSS, caso não existam no seu layout principal */ --space-5: 1.5rem; --space-6: 2rem; --bg-secondary: #141414; --border-radius: 8px; --border-color: #303030; --space-3: 0.75rem; --accent-primary: #E50914; --text-secondary: #A0A0A0; --space-4: 1rem; --bg-tertiary: #222222; --accent-primary-rgb: 229, 9, 20; }
    .player-main-container { padding: var(--space-5, 1.5rem) 0; }
    .player-grid { display: grid; grid-template-columns: 1fr; gap: var(--space-6, 2rem); }
    @media (min-width: 1024px) { .player-grid { grid-template-columns: 1fr 350px; } }
    .video-player-section { background-color: var(--bg-secondary, #141414); border-radius: var(--border-radius, 8px); border: 1px solid var(--border-color, #303030); padding: var(--space-3, 0.75rem); display: flex; flex-direction: column; }
    .video-player-header { padding: var(--space-3, 0.75rem); }
    .video-player-header h1 { font-size: 1.8rem; margin: 0; color: var(--accent-primary, #E50914); }
    .video-player-header h1 a { color: inherit; text-decoration: none; }
    .video-player-header h1 a:hover { text-decoration: underline; }
    .video-player-header p { color: var(--text-secondary, #A0A0A0); margin: 0.5rem 0 0 0; }
    .video-player-container { position: relative; width: 100%; aspect-ratio: 16 / 9; background-color: #000; border-radius: var(--border-radius, 8px); overflow: hidden; }
    .video-player-container iframe, .video-player-container video { width: 100%; height: 100%; border: none; }
    .player-controls { padding: var(--space-4, 1rem); border-top: 1px solid var(--border-color, #303030); margin-top: 1rem; }
    .player-controls .actions-cell { display: flex; justify-content: space-between; gap: var(--space-3, 0.75rem); }
    .player-controls .actions-cell .btn { flex-grow: 1; }
    .player-controls h4 { font-size: 1.1rem; margin-bottom: 1rem; color: var(--text-secondary, #A0A0A0); }
    .download-options { display: flex; flex-wrap: wrap; gap: var(--space-3, 0.75rem); margin-bottom: 1.5rem; }
    .download-options .btn { background-color: var(--bg-tertiary, #222); }
    .episode-list-sidebar { background-color: var(--bg-secondary, #141414); border-radius: var(--border-radius, 8px); border: 1px solid var(--border-color, #303030); max-height: calc(100vh - 150px); overflow-y: auto; }
    .episode-list-sidebar h3 { padding: var(--space-4, 1rem); margin: 0; border-bottom: 1px solid var(--border-color, #303030); font-size: 1.2rem; position: sticky; top: 0; background-color: var(--bg-secondary, #141414); z-index: 10; }
    .episode-list { list-style: none; padding: 0; margin: 0; }
    .episode-list li a { display: flex; align-items: center; gap: 1rem; padding: 1rem; color: var(--text-secondary, #A0A0A0); transition: all 0.2s ease; border-bottom: 1px solid var(--border-color, #303030); text-decoration: none; }
    .episode-list li:last-child a { border-bottom: none; }
    .episode-list li a:hover { background-color: rgba(var(--accent-primary-rgb, 229, 9, 20), 0.1); color: var(--accent-primary, #E50914); }
    .episode-list li.active a { background-color: var(--accent-primary, #E50914); color: white; font-weight: 600; }
    .episode-number-badge { flex-shrink: 0; width: 35px; height: 35px; display: flex; align-items: center; justify-content: center; background-color: var(--bg-tertiary, #222); border-radius: 4px; font-weight: 600; font-size: 0.9em; }
    .episode-list li.active .episode-number-badge { background-color: rgba(255, 255, 255, 0.2); }
    .episode-title { flex-grow: 1; line-height: 1.4; }
</style>

<div class="player-main-container container">
    <div class="player-grid">
        
        <main class="video-player-section">
            <div class="video-player-header">
                <!-- ATUALIZAÇÃO: Usando initialAnime e initialEpisode para consistência com o backend -->
                <a href="/anime/<%= initialAnime.slug %>" title="Voltar para a página do anime"><h1><%= initialAnime.titulo %></h1></a>
                <p>Episódio <%= initialEpisode.numero %><% if (initialEpisode.titulo) { %>: <%= initialEpisode.titulo %><% } %></p>
            </div>
            
            <div class="video-player-container">
                <% if (urlPlayer) { %>
                    <% if (initialEpisode.tipoVideo === 'upload') { %>
                        <video controls src="<%= urlPlayer %>" autoplay></video>
                    <% } else { %>
                        <iframe src="<%= urlPlayer %>" frameborder="0" allow="autoplay; encrypted-media; picture-in-picture" allowfullscreen></iframe>
                    <% } %>
                <% } else { %>
                    <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: var(--text-secondary);">
                        <p>Vídeo indisponível no momento.</p>
                    </div>
                <% } %>
            </div>
            
            <div class="player-controls">
                <% if (podeBaixar && linksParaDownload.length > 0) { %>
                    <h4><i class="fas fa-download"></i> Opções de Download</h4>
                    <div class="download-options">
                        <% linksParaDownload.forEach(dl => { %>
                            <% if (initialEpisode.tipoVideo === 'upload') { %>
                                <!-- Para uploads locais, força o download com o atributo 'download' -->
                                <a href="<%= dl.urlDownload %>" class="btn btn--secondary" download>
                                    <i class="fas fa-hdd"></i> <%= dl.qualidade %>
                                </a>
                            <% } else { %>
                                <!-- Para links externos (GDrive, etc.), abre em uma nova aba para a página de download -->
                                <a href="<%= dl.urlDownload %>" target="_blank" rel="noopener noreferrer" class="btn btn--secondary">
                                    <i class="fas fa-cloud-download-alt"></i> <%= dl.qualidade %>
                                </a>
                            <% } %>
                        <% }) %>
                    </div>
                    <hr style="border-color: var(--border-color, #303030); margin: 1.5rem 0;">
                <% } %>
                
                <div class="actions-cell">
                    <% 
                        const episodioAtualIndex = todosEpisodios.findIndex(ep => ep.id == initialEpisode.id);
                        const episodioAnterior = todosEpisodios[episodioAtualIndex - 1];
                        const proximoEpisodio = todosEpisodios[episodioAtualIndex + 1];
                    %>
                    
                    <% if(episodioAnterior) { %>
                        <a href="/assistir/<%= initialAnime.slug %>/<%= episodioAnterior.id %>" class="btn btn--secondary"><i class="fas fa-backward"></i> Anterior</a>
                    <% } else { %>
                        <span class="btn btn--secondary" style="opacity: 0.5; cursor: not-allowed;"><i class="fas fa-backward"></i> Anterior</span>
                    <% } %>

                    <% if(proximoEpisodio) { %>
                        <a href="/assistir/<%= initialAnime.slug %>/<%= proximoEpisodio.id %>" class="btn btn--primary">Próximo <i class="fas fa-forward"></i></a>
                    <% } else { %>
                        <span class="btn btn--primary" style="opacity: 0.5; cursor: not-allowed;">Próximo <i class="fas fa-forward"></i></span>
                    <% } %>
                </div>
            </div>
        </main>
        
        <aside class="episode-list-sidebar">
            <h3><i class="fas fa-list-ol"></i> Lista de Episódios</h3>
            <ul class="episode-list">
                <% todosEpisodios.forEach(ep => { %>
                   <li class="<%= ep.id == initialEpisode.id ? 'active' : '' %>">
                       <a href="/assistir/<%= initialAnime.slug %>/<%= ep.id %>" title="Assistir Episódio <%= ep.numero %>: <%= ep.titulo || '' %>">
                           <span class="episode-number-badge"><%= ep.numero %></span>
                           <span class="episode-title"><%= ep.titulo || `Episódio ${ep.numero}` %></span>
                       </a>
                   </li>
               <% }) %>
           </ul>
        </aside>

    </div>
</div>
