<%# /* ================================================================================================== */ %>
<%# /*      LÓGICA DE PREPARAÇÃO DO PLAYER - VERSÃO JINCHŪRIKI (INTACTA)                                  */ %>
<%# /* ================================================================================================== */ %>
<%
    let urlPlayer = initialEpisode.urlVideo;
    let linksParaDownload = [];
    let podeBaixar = false;

    if (initialEpisode.urlVideo) {
        if (initialEpisode.tipoVideo === 'upload') {
            podeBaixar = true;
            try {
                const parsedQualities = JSON.parse(initialEpisode.urlVideo);
                if (typeof parsedQualities === 'object' && parsedQualities !== null && Object.keys(parsedQualities).length > 0) {
                    urlPlayer = Object.values(parsedQualities)[0];
                    for (const qualidade in parsedQualities) { linksParaDownload.push({ qualidade: qualidade, urlDownload: parsedQualities[qualidade] }); }
                } else { throw new Error("JSON inválido."); }
            } catch (e) {
                urlPlayer = initialEpisode.urlVideo;
                linksParaDownload.push({ qualidade: 'Padrão', urlDownload: initialEpisode.urlVideo });
            }
        
        } else if (initialEpisode.tipoVideo === 'gdrive') {
            try {
                const regex = /(?:drive\.google\.com\/(?:file\/d\/|open\?id=|drive\/folders\/))([a-zA-Z0-9_-]{25,})/;
                const match = initialEpisode.urlVideo.match(regex);
                if (match && match[1]) {
                    const fileId = match[1];
                    podeBaixar = true;
                    urlPlayer = `https://drive.google.com/file/d/${fileId}/preview`;
                    const urlDownloadFinal = `https://drive.usercontent.google.com/download?id=${fileId}&export=download&authuser=0`;
                    linksParaDownload.push({ qualidade: 'Google Drive', urlDownload: urlDownloadFinal });
                } else { podeBaixar = false; urlPlayer = ''; }
            } catch(e) { podeBaixar = false; urlPlayer = ''; }

        } else if (['mega', 'mediafire', 'iframe'].includes(initialEpisode.tipoVideo)) {
            podeBaixar = (initialEpisode.tipoVideo !== 'iframe');
            urlPlayer = initialEpisode.urlVideo;
            if (podeBaixar) {
                linksParaDownload.push({ qualidade: `${initialEpisode.tipoVideo.charAt(0).toUpperCase() + initialEpisode.tipoVideo.slice(1)}`, urlDownload: initialEpisode.urlVideo });
            }
        }
    }
%>

<style>
    /* ================================================================================================== */
    /*      ESTILIZAÇÃO CSS COMPLETA COM TEMA DUAL (LIGHT/DARK) E LAYOUT CORRIGIDO                        */
    /*      Versão: Jinchūriki Mode - Full, Expansivo e Very Large                                        */
    /* ================================================================================================== */
    
    /* --- ARQUITETURA DE TEMAS --- */
    :root {
        /* Tema Claro (Padrão) */
        --bg-primary: #f4f7f9;
        --bg-secondary: #ffffff;
        --bg-tertiary: #e9eef2;
        --text-primary: #1a202c;
        --text-secondary: #4a5568;
        --accent-primary: #E50914;
        --accent-primary-rgb: 229, 9, 20;
        --accent-primary-hover: #f5313a;
        --border-color: #d1d8e0;
        --border-color-soft: #e2e8f0;
        --shadow-color-rgb: 100, 116, 139;
        --font-primary: 'Poppins', sans-serif;
        --transition-speed: 0.3s;
        --border-radius: 8px;
        --border-radius-lg: 12px;
    }

    body.dark-theme {
        /* Tema Escuro (Akatsuki) - As mesmas variáveis com valores diferentes */
        --bg-primary: #0A0A0A;
        --bg-secondary: #151515;
        --bg-tertiary: #242424;
        --text-primary: #f9f9f9;
        --text-secondary: #a0a0a0;
        --accent-primary: #E50914;
        --accent-primary-rgb: 229, 9, 20;
        --accent-primary-hover: #ff2c36;
        --border-color: #3a3a3a;
        --border-color-soft: #2a2a2a;
        --shadow-color-rgb: 0, 0, 0;
    }
    
    body {
        background-color: var(--bg-primary);
        color: var(--text-primary);
        font-family: var(--font-primary);
        transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
        overflow-x: hidden;
    }

    /* --- LAYOUT E ESTRUTURA --- */
    .player-page-container {
        width: 100%;
        max-width: 1600px; /* Layout mais largo para imersão */
        margin: 0 auto;
        padding: 1.5rem;
        animation: fadeInUp 0.6s ease-out;
    }

    @keyframes fadeInUp {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .player-page-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2.5rem;
    }
    @media (min-width: 1024px) {
        .player-page-grid {
            grid-template-columns: 1fr 420px; /* Sidebar um pouco mais larga */
        }
    }
    
    .player-section-wrapper, .player-sidebar {
        background-color: var(--bg-secondary);
        border-radius: var(--border-radius-lg);
        border: 1px solid var(--border-color);
        box-shadow: 0 4px 12px rgba(var(--shadow-color-rgb), 0.1);
        transition: background-color var(--transition-speed) ease, border-color var(--transition-speed) ease;
    }

    /* --- SEÇÃO DO PLAYER --- */
    .player-section-wrapper {
        padding: 1.5rem;
    }
    .video-player-header h1 {
        font-size: clamp(1.4rem, 4vw, 2.2rem);
        font-weight: 700;
        line-height: 1.3;
    }
    .video-player-header h1 a { color: var(--text-primary); text-decoration: none; transition: color var(--transition-speed); }
    .video-player-header h1 a:hover { color: var(--accent-primary); }
    .video-player-header p { font-size: 1rem; color: var(--text-secondary); margin-top: 0.25rem; }

    .video-player-container {
        position: relative; width: 100%; aspect-ratio: 16 / 9;
        background-color: #000; border-radius: var(--border-radius);
        overflow: hidden; margin-top: 1.5rem;
        border: 2px solid var(--border-color);
    }
    .video-player-container iframe, .video-player-container video {
        position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;
    }

    /* --- CONTROLES E BOTÕES --- */
    .player-controls { padding-top: 1.5rem; display: flex; flex-direction: column; gap: 1.5rem; }
    .player-options-bar { display: flex; flex-wrap: wrap; justify-content: flex-end; align-items: center; gap: 1rem; }
    
    .btn {
        display: inline-flex; align-items: center; justify-content: center;
        gap: 0.5rem; padding: 0.7rem 1.2rem; border-radius: 50px;
        text-decoration: none; cursor: pointer; font-weight: 600;
        transition: all var(--transition-speed) ease; border: 2px solid transparent;
        text-transform: uppercase; letter-spacing: 1px; font-size: 0.8rem;
    }
    .btn--secondary { background-color: var(--bg-tertiary); color: var(--text-secondary); border-color: var(--border-color-soft); }
    .btn--secondary:hover { color: var(--text-primary); border-color: var(--accent-primary); }
    .btn--primary { background: var(--accent-primary); color: white; }
    .btn--primary:hover { background: var(--accent-primary-hover); transform: translateY(-2px); }
    
    /* Botão de Tema */
    #theme-toggle-btn { font-size: 1rem; padding: 0.7rem; aspect-ratio: 1/1; }
    #theme-toggle-btn .fa-sun { display: none; }
    #theme-toggle-btn .fa-moon { display: inline-block; }
    body.dark-theme #theme-toggle-btn .fa-sun { display: inline-block; }
    body.dark-theme #theme-toggle-btn .fa-moon { display: none; }

    .download-dropdown { position: relative; }
    .download-dropdown .dropdown-menu {
        display: none; position: absolute; bottom: calc(100% + 10px); right: 0;
        background-color: var(--bg-secondary); min-width: 200px;
        box-shadow: 0 8px 30px rgba(var(--shadow-color-rgb), 0.2); z-index: 100;
        border-radius: var(--border-radius); border: 1px solid var(--border-color);
        padding: 0.5rem; animation: fadeInDropdown 0.2s ease-out;
    }
    .download-dropdown .dropdown-menu.show { display: block; }
    .dropdown-item { color: var(--text-secondary); padding: 0.75rem 1rem; text-decoration: none; display: flex; align-items: center; gap: 0.75rem; transition: all var(--transition-speed); border-radius: var(--border-radius); }
    .dropdown-item:hover { background-color: var(--accent-primary); color: white; }

    .actions-cell { display: flex; justify-content: space-between; gap: 1rem; border-top: 1px solid var(--border-color); padding-top: 1.5rem; }
    .actions-cell .btn { flex-grow: 1; text-align: center; justify-content: center; }

    /* --- [CORREÇÃO DE LAYOUT] SIDEBAR DE EPISÓDIOS --- */
    .player-sidebar {
        display: flex; flex-direction: column;
        /* A sidebar em si não rola, seu conteúdo que rola. */
    }
    @media (min-width: 1024px) {
        .player-sidebar {
            /* Define uma altura máxima para a sidebar em telas grandes, baseada na altura da janela. */
            max-height: calc(100vh - 3rem); /* Ex: altura da tela menos o padding da página. */
            position: sticky; /* Faz a sidebar "grudar" no topo ao rolar a página principal (se ela for maior) */
            top: 1.5rem;
        }
    }
    .player-sidebar h3 {
        padding: 1.25rem 1.5rem; margin: 0; border-bottom: 1px solid var(--border-color);
        font-size: 1.2rem; font-weight: 700; flex-shrink: 0; /* Impede que o header encolha */
    }
    .episode-list-scroll-wrapper {
        overflow-y: auto; /* A MÁGICA ACONTECE AQUI: Apenas este container rola. */
        padding: 1rem;
        /* Estilizando a barra de rolagem */
        scrollbar-color: var(--accent-primary) var(--bg-tertiary);
        scrollbar-width: thin;
    }
    .episode-list-scroll-wrapper::-webkit-scrollbar { width: 8px; }
    .episode-list-scroll-wrapper::-webkit-scrollbar-track { background: var(--bg-tertiary); }
    .episode-list-scroll-wrapper::-webkit-scrollbar-thumb { background-color: var(--accent-primary); border-radius: 10px; }
    
    .episode-list { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 0.75rem; }
    .episode-list-item a { display: flex; align-items: center; gap: 1rem; padding: 0.5rem; color: var(--text-secondary); transition: all var(--transition-speed); border-radius: var(--border-radius); text-decoration: none; border: 2px solid transparent; }
    .episode-list-item a:hover { background-color: var(--bg-tertiary); border-color: var(--border-color-soft); color: var(--text-primary); }
    .episode-list-item.active a { background-color: var(--accent-primary); color: white; font-weight: 600; border-color: var(--accent-primary-hover); }
    .ep-list-thumbnail { flex-shrink: 0; width: 100px; height: 56px; background-color: #000; border-radius: var(--border-radius); background-size: cover; background-position: center; }
    .ep-list-info { flex-grow: 1; overflow: hidden; }
    .ep-list-info .ep-list-title { font-weight: 500; font-size: 0.9rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .episode-list-item.active a .ep-list-info .ep-list-title { color: white; }

    /* --- SUGESTÕES E RESPONSIVIDADE --- */
    .suggestions-section { margin-top: 2.5rem; grid-column: 1 / -1; }
    .suggestions-section h2 { font-size: 1.5rem; font-weight: 700; margin-bottom: 1.5rem; border-left: 4px solid var(--accent-primary); padding-left: 1rem; }
    .suggestions-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)); gap: 1.5rem; }
    .suggestion-card a { display: block; text-decoration: none; color: var(--text-primary); border-radius: var(--border-radius); overflow: hidden; background-color: var(--bg-secondary); box-shadow: 0 5px 20px rgba(var(--shadow-color-rgb), 0.08); transition: all var(--transition-speed); }
    .suggestion-card a:hover { transform: translateY(-8px); box-shadow: 0 12px 30px rgba(var(--shadow-color-rgb), 0.12); }
    .suggestion-card-image { aspect-ratio: 2 / 3; background-size: cover; background-position: center; transition: transform var(--transition-speed); }
    .suggestion-card a:hover .suggestion-card-image { transform: scale(1.05); }
    .suggestion-card-title { padding: 0.75rem; font-weight: 600; font-size: 0.9rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }

</style>

<div class="player-page-container">
    <div class="player-page-grid">
        <main class="main-content">
            <div class="player-section-wrapper">
                <div class="video-player-header">
                    <h1><a href="/anime/<%= initialAnime.slug %>" title="Voltar para a página do anime"><%= initialAnime.titulo %></a></h1>
                    <p>Temporada <%= initialEpisode.temporada %> • Episódio <%= initialEpisode.numero %><% if (initialEpisode.titulo) { %>: <%= initialEpisode.titulo %><% } %></p>
                </div>
                
                <div class="video-player-container">
                    <% if (urlPlayer) { %>
                        <iframe src="<%= urlPlayer %>" frameborder="0" allow="autoplay; encrypted-media; picture-in-picture" allowfullscreen></iframe>
                    <% } else { %>
                        <div style="display:flex; flex-direction:column; align-items:center; justify-content:center; height:100%; text-align: center; padding: 1rem;">
                            <i class="fas fa-video-slash" style="font-size: 2.5rem; color: var(--accent-primary); margin-bottom: 1rem;"></i>
                            <p>Vídeo indisponível ou fonte inválida.</p>
                        </div>
                    <% } %>
                </div>
                
                <div class="player-controls">
                    <div class="player-options-bar">
                        <!-- [NOVO] BOTÃO PARA TROCAR O TEMA -->
                        <button id="theme-toggle-btn" class="btn btn--secondary" title="Alterar Tema">
                            <i class="fas fa-moon"></i>
                            <i class="fas fa-sun"></i>
                        </button>

                        <% if (podeBaixar && linksParaDownload.length > 0) { %>
                            <div class="download-dropdown">
                                <button id="downloadBtn" class="btn btn--secondary">
                                    <i class="fas fa-download"></i> Download
                                </button>
                                <div id="downloadMenu" class="dropdown-menu">
                                    <% linksParaDownload.forEach(dl => { %>
                                        <a href="<%= dl.urlDownload %>" target="_blank" rel="noopener noreferrer" class="dropdown-item">
                                            <i class="fas fa-cloud-download-alt"></i> <span><%= dl.qualidade %></span>
                                        </a>
                                    <% }) %>
                                </div>
                            </div>
                        <% } %>
                    </div>

                    <div class="actions-cell">
                        <% 
                            const episodioAtualIndex = todosEpisodios.findIndex(ep => ep.id == initialEpisode.id);
                            const episodioAnterior = todosEpisodios[episodioAtualIndex - 1];
                            const proximoEpisodio = todosEpisodios[episodioAtualIndex + 1];
                        %>
                        <% if(episodioAnterior) { %>
                            <a href="/assistir/<%= initialAnime.slug %>/<%= episodioAnterior.id %>" class="btn btn--secondary"><i class="fas fa-backward"></i> Ant</a>
                        <% } else { %>
                            <span class="btn btn--secondary" style="opacity: 0.5; cursor: not-allowed;"><i class="fas fa-backward"></i> Ant</span>
                        <% } %>
                        <% if(proximoEpisodio) { %>
                            <a href="/assistir/<%= initialAnime.slug %>/<%= proximoEpisodio.id %>" class="btn btn--primary">Próx <i class="fas fa-forward"></i></a>
                        <% } else { %>
                            <span class="btn btn--primary" style="opacity: 0.5; cursor: not-allowed;">Próx <i class="fas fa-forward"></i></span>
                        <% } %>
                    </div>
                </div>
            </div>

            <section class="suggestions-section">
                <h2>Você também pode gostar</h2>
                <div class="suggestions-grid">
                    <% if (locals.sugestoes && sugestoes.length > 0) { %>
                        <% sugestoes.forEach(anime => { %>
                            <div class="suggestion-card">
                                <a href="/anime/<%= anime.slug %>">
                                    <div class="suggestion-card-image" style="background-image: url('<%= anime.imagemCapa %>');"></div>
                                    <h4 class="suggestion-card-title"><%= anime.titulo %></h4>
                                </a>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <p>Nenhuma sugestão disponível no momento.</p>
                    <% } %>
                </div>
            </section>
        </main>
        
        <aside class="player-sidebar">
            <h3><i class="fas fa-list-ol"></i> Lista de Episódios</h3>
            <div class="episode-list-scroll-wrapper">
                <ul class="episode-list">
                    <% todosEpisodios.forEach(ep => { %>
                       <li class="episode-list-item <%= ep.id == initialEpisode.id ? 'active' : '' %>">
                           <a href="/assistir/<%= initialAnime.slug %>/<%= ep.id %>" title="Assistir Episódio <%= ep.numero %>: <%= ep.titulo || '' %>">
                               <div class="ep-list-thumbnail" style="background-image: url('<%= ep.thumbnailUrl || initialAnime.imagemCapa || "/images/avatar_padrao.png" %>')"></div>
                               <div class="ep-list-info">
                                    <span class="ep-list-title"><%= ep.titulo || `Episódio ${ep.numero}` %></span>
                               </div>
                           </a>
                       </li>
                   <% }) %>
               </ul>
            </div>
        </aside>
    </div>
</div>

<script>
// Bloco de script encapsulado para evitar conflitos
(() => {
    // Lógica para o dropdown de download (preservada 100% intacta)
    const downloadBtn = document.getElementById('downloadBtn');
    const downloadMenu = document.getElementById('downloadMenu');
    if (downloadBtn && downloadMenu) {
        downloadBtn.addEventListener('click', (event) => {
            event.stopPropagation();
            downloadMenu.classList.toggle('show');
        });
        window.addEventListener('click', () => {
            if (downloadMenu.classList.contains('show')) {
                downloadMenu.classList.remove('show');
            }
        });
    }

    // [NOVO] Lógica completa para o Seletor de Tema com Memória
    const themeToggleButton = document.getElementById('theme-toggle-btn');
    const body = document.body;

    // Função que aplica o tema salvo ou o padrão do sistema
    const applyInitialTheme = () => {
        const savedTheme = localStorage.getItem('theme');
        // A primeira preferência é o tema salvo pelo usuário
        if (savedTheme) {
            body.classList.toggle('dark-theme', savedTheme === 'dark');
        } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            // Se não houver tema salvo, respeita a preferência do sistema operacional
            body.classList.add('dark-theme');
        }
    };

    // Adiciona o listener para o clique no botão
    themeToggleButton.addEventListener('click', () => {
        body.classList.toggle('dark-theme');
        // Salva a escolha atual no localStorage
        const currentTheme = body.classList.contains('dark-theme') ? 'dark' : 'light';
        localStorage.setItem('theme', currentTheme);
    });

    // Aplica o tema assim que o DOM estiver pronto
    document.addEventListener('DOMContentLoaded', applyInitialTheme);
})();
</script>