<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="icon" href="/images/1.ico" type="image/ico">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        /* ==========================================================================
           1. VARIÁVEIS GLOBAIS E TEMAS (DARK/LIGHT)
           ========================================================================== */
        :root {
            --accent-primary-rgb: 229, 9, 20;
            --accent-glow: 0 0 20px rgba(var(--accent-primary-rgb), 0.5);
            --transition-speed: 0.3s;
            --transition-curve: cubic-bezier(0.4, 0, 0.2, 1);
            --font-primary: 'Poppins', sans-serif;
            --border-radius: 8px;
            --sidebar-width: 280px;
        }

        /* --- TEMA ESCURO (PADRÃO) --- */
        html, html.dark-theme {
            --bg-primary: #0A0A0A;
            --bg-secondary: #121212;
            --bg-tertiary: #1E1E1E;
            --bg-glass: rgba(18, 18, 18, 0.65);
            --text-primary: #F0F0F0;
            --text-secondary: #A0A0A0;
            --text-tertiary: #6B7280;
            --border-color: #2E2E2E;
            --border-color-light: #444444;
            --accent-primary: #E50914;
            --accent-secondary: #3b82f6;
            --success: #10B981;
            --error: #EF4444;
            --warning: #F59E0B;
            --shadow-color: rgba(0, 0, 0, 0.5);
            --shadow-light: rgba(0, 0, 0, 0.3);
            --focus-glow: 0 0 0 3px rgba(var(--accent-primary-rgb), 0.4);
        }

        /* --- TEMA CLARO --- */
        html.light-theme {
            --bg-primary: #F9FAFB;
            --bg-secondary: #FFFFFF;
            --bg-tertiary: #F3F4F6;
            --bg-glass: rgba(255, 255, 255, 0.65);
            --text-primary: #111827;
            --text-secondary: #374151;
            --text-tertiary: #6B7280;
            --border-color: #D1D5DB;
            --border-color-light: #9CA3AF;
            --accent-primary: #D90429;
            --accent-secondary: #2563EB;
            --success: #059669;
            --error: #DC2626;
            --warning: #D97706;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --shadow-light: rgba(0, 0, 0, 0.05);
            --focus-glow: 0 0 0 3px rgba(var(--accent-primary-rgb), 0.3);
        }

        *, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
        html, body { height: 100%; }
        body { 
            font-family: var(--font-primary); background-color: var(--bg-primary); color: var(--text-primary); 
            line-height: 1.6; font-size: 16px; position: relative; overflow: hidden;
            -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
            transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
        }
        body.page-admin { 
            background-image: linear-gradient(rgba(10, 10, 10, 0.9), rgba(10, 10, 10, 0.9)), url('/images/berserk_legacy.jpg');
            background-size: cover; background-position: center center; background-attachment: fixed; background-repeat: no-repeat;
        }
        html.light-theme body.page-admin {
            background-image: linear-gradient(rgba(249, 250, 251, 0.9), rgba(249, 250, 251, 0.9)), url('/images/berserk_legacy.jpg');
        }

        a { text-decoration: none; color: var(--accent-secondary); transition: color var(--transition-speed) ease; }
        a:hover { color: #60a5fa; }
        h1, h2, h3, h4 { margin-bottom: 1rem; line-height: 1.3; font-weight: 600; text-shadow: 0 1px 3px var(--shadow-light); }
        h2 { font-size: 1.75rem; }
        h4 { font-size: 1.1rem; color: var(--text-tertiary); }
        p { margin-bottom: 1rem; color: var(--text-secondary); }
        img { max-width: 100%; display: block; }
        hr { border: 0; height: 1px; background-color: var(--border-color); margin: 2rem 0; }

        /* Custom Scrollbar */
        ::-webkit-scrollbar { width: 8px; height: 8px; }
        ::-webkit-scrollbar-track { background: var(--bg-primary); }
        ::-webkit-scrollbar-thumb { background-color: var(--bg-tertiary); border-radius: 20px; border: 2px solid var(--bg-primary); }
        ::-webkit-scrollbar-thumb:hover { background-color: var(--border-color-light); }
        
        /* ==========================================================================
           2. COMPONENTES REUTILIZÁVEIS
           ========================================================================== */
        
        .btn { padding: 0.75rem 1.25rem; border-radius: var(--border-radius); border: 1px solid var(--border-color); font-weight: 600; cursor: pointer; transition: all var(--transition-speed) var(--transition-curve); display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; background-color: var(--bg-tertiary); color: var(--text-primary); text-shadow: 0 1px 2px var(--shadow-light); }
        .btn:disabled { opacity: 0.5; cursor: not-allowed; transform: none !important; box-shadow: none !important; }
        .btn:hover:not(:disabled) { background-color: var(--border-color); transform: translateY(-2px); }
        .btn:active:not(:disabled) { transform: translateY(0); }
        .btn--primary { background-color: var(--accent-primary); border-color: var(--accent-primary); color: white; box-shadow: var(--accent-glow); }
        .btn--primary:hover:not(:disabled) { background-color: #ff1c28; border-color: #ff1c28; transform: scale(1.05) translateY(-2px); }
        .btn--small { padding: 0.5rem 0.75rem; font-size: 0.9rem; }
        .btn-icon-only { padding: 0.6rem; width: 40px; height: 40px; border-radius: 50%; }

        .form-group { margin-bottom: 1.5rem; position: relative; }
        .form-group label { display: block; margin-bottom: 0.5rem; font-weight: 500; color: var(--text-secondary); font-size: 0.9rem; }
        .input, .textarea, .select { width: 100%; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); padding: 0.75rem 1rem; border-radius: var(--border-radius); font-family: var(--font-primary); font-size: 1rem; transition: all var(--transition-speed) ease; }
        .input:focus, .textarea:focus, .select:focus { outline: none; border-color: var(--accent-primary); box-shadow: var(--focus-glow); }
        .textarea { resize: vertical; min-height: 120px; }
        .input[type="file"] { padding: 0.5rem; }
        .input[type="file"]::file-selector-button { font-weight: bold; color: var(--accent-primary); background-color: var(--bg-tertiary); border: none; border-right: 1px solid var(--border-color); padding: 0.5rem 1rem; margin-right: 1rem; border-radius: var(--border-radius) 0 0 var(--border-radius); cursor: pointer; transition: background-color var(--transition-speed) ease; }
        .input[type="file"]::file-selector-button:hover { background-color: var(--border-color); }
        .upload-progress-bar { width: 100%; height: 8px; background-color: var(--bg-primary); border-radius: 4px; margin-top: 0.75rem; overflow: hidden; display: none; }
        .upload-progress-bar-inner { width: 0%; height: 100%; background-color: var(--accent-secondary); border-radius: 4px; transition: width 0.3s ease; }
        .upload-progress-text { font-size: 0.8rem; color: var(--text-tertiary); margin-top: 0.25rem; display: none; }
        
        /* ==========================================================================
           3. LAYOUT PRINCIPAL E PAINÉIS
           ========================================================================== */
        
        body.page-admin { display: flex; height: 100vh; }
        .admin-sidebar { width: var(--sidebar-width); background-color: var(--bg-secondary); border-right: 1px solid var(--border-color); flex-shrink: 0; display: flex; flex-direction: column; box-shadow: 5px 0 25px var(--shadow-color); z-index: 1000; transition: all var(--transition-speed) ease; }
        .admin-sidebar-header { text-align: center; padding: 1.5rem 1rem; flex-shrink: 0; border-bottom: 1px solid var(--border-color); }
        .admin-sidebar-header a { display: inline-flex; align-items: center; gap: 0.75rem; font-size: 1.3rem; font-weight: 700; color: var(--text-primary); }
        .admin-sidebar-header img { height: 40px; filter: drop-shadow(0 0 8px var(--accent-primary)); transition: transform var(--transition-speed) ease; }
        .admin-sidebar-header a:hover img { transform: rotate(15deg) scale(1.1); }
        .sidebar-section-title { font-size: 0.75rem; font-weight: 600; text-transform: uppercase; letter-spacing: 1px; color: var(--text-tertiary); padding: 0 1.5rem; margin: 1.5rem 0 0.5rem; }
        .admin-nav { list-style: none; flex-grow: 1; overflow-y: auto; padding: 0 1rem; }
        .admin-nav ul { list-style-type: none; }
        .admin-nav .nav-link { display: flex; align-items: center; gap: 1rem; padding: 0.75rem 1rem; margin-bottom: 0.5rem; border-radius: var(--border-radius); color: var(--text-secondary); font-weight: 500; transition: all 0.2s ease; cursor: pointer; border-left: 4px solid transparent; }
        .admin-nav .nav-link:hover { background-color: var(--bg-tertiary); color: var(--text-primary); }
        .admin-nav .nav-link.active { background: linear-gradient(90deg, rgba(var(--accent-primary-rgb), 0.15) 0%, rgba(var(--accent-primary-rgb), 0) 100%); color: var(--accent-primary); border-left-color: var(--accent-primary); font-weight: 600; text-shadow: 0 0 10px rgba(var(--accent-primary-rgb), 0.5); }
        .admin-nav .nav-link i { width: 20px; text-align: center; font-size: 1.2rem; }
        .admin-sidebar-footer { padding: 1rem; border-top: 1px solid var(--border-color); flex-shrink: 0; }
        .user-profile-widget { display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1rem; padding: 0.5rem; border-radius: var(--border-radius); transition: background-color var(--transition-speed) ease; }
        .user-profile-widget:hover { background-color: var(--bg-tertiary); }
        .user-profile-widget img { width: 45px; height: 45px; border-radius: 50%; object-fit: cover; border: 2px solid var(--border-color); transition: border-color var(--transition-speed) ease; }
        .user-profile-widget:hover img { border-color: var(--accent-primary); }
        .user-profile-widget .user-info { line-height: 1.2; overflow: hidden; }
        .user-profile-widget .user-name { font-weight: 600; color: var(--text-primary); white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .user-profile-widget .edit-link { font-size: 0.8rem; color: var(--text-tertiary); }
        .admin-main-content { flex-grow: 1; display: flex; flex-direction: column; height: 100vh; background-color: var(--bg-glass); backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px); border-left: 1px solid var(--border-color); position: relative; transition: background-color var(--transition-speed) ease; }
        .main-content-header { padding: 1.5rem 2rem; flex-shrink: 0; display: flex; align-items: center; gap: 1rem; border-bottom: 1px solid var(--border-color); background-color: rgba(18, 18, 18, 0.5); }
        html.light-theme .main-content-header { background-color: rgba(243, 244, 246, 0.5); }
        .main-content-header h1 { margin: 0; flex-grow: 1; display: flex; align-items: center; gap: 1rem; }
        .main-content-body { padding: 2rem; overflow-y: auto; flex-grow: 1; }
        .admin-panel { display: none; animation: fadeIn 0.5s var(--transition-curve); }
        .admin-panel.active { display: block; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(15px); } to { opacity: 1; transform: translateY(0); } }
        .admin-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem; margin-top: 1rem; }
        .stat-card { background: linear-gradient(145deg, var(--bg-tertiary), var(--bg-secondary)); padding: 1.5rem; border-radius: var(--border-radius); border-left: 4px solid var(--accent-primary); transition: all var(--transition-speed) var(--transition-curve); box-shadow: 0 4px 15px var(--shadow-color); }
        .stat-card:hover { transform: translateY(-5px); box-shadow: 0 8px 25px var(--shadow-color), var(--accent-glow); }
        .stat-card h3 { font-size: 0.9rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; color: var(--text-secondary); margin: 0; }
        .stat-card p { font-size: 2.5rem; font-weight: 700; color: var(--text-primary); margin: 0.5rem 0 0 0; }
        .items-grid { display: grid; gap: 1.5rem; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); }
        .item-card { background-color: var(--bg-secondary); border: 1px solid var(--border-color); box-shadow: 0 4px 15px var(--shadow-color); border-radius: var(--border-radius); display: flex; flex-direction: column; overflow: hidden; transition: all var(--transition-speed) var(--transition-curve); position: relative; }
        .item-card:hover { transform: translateY(-8px); box-shadow: 0 10px 30px var(--shadow-color); border-color: var(--border-color-light); }
        .item-card__image { width: 100%; height: 300px; object-fit: cover; border-bottom: 1px solid var(--border-color); background-color: var(--bg-primary); }
        .item-card__content { padding: 1rem; flex-grow: 1; display: flex; flex-direction: column; }
        .item-card__title { font-size: 1.1rem; font-weight: 600; color: var(--text-primary); margin-bottom: 0.5rem; line-height: 1.3; flex-grow: 1; }
        .item-card__meta { font-size: 0.8rem; color: var(--text-secondary); display: flex; justify-content: space-between; gap: 0.5rem; flex-wrap: wrap; }
        .item-card__actions { display: flex; gap: 0.5rem; padding: 0 1rem 1rem; }
        .admin-form-container { padding: 2.5rem; background-color: var(--bg-secondary); border-radius: var(--border-radius); margin-top: 1rem; max-width: 800px; margin-left: auto; margin-right: auto; border: 1px solid var(--border-color); }
        .table-container { background-color: var(--bg-secondary); border-radius: var(--border-radius); border: 1px solid var(--border-color); overflow: hidden; }
        .data-table { width: 100%; border-collapse: collapse; white-space: nowrap; }
        .data-table th, .data-table td { padding: 1rem 1.25rem; text-align: left; border-bottom: 1px solid var(--border-color); vertical-align: middle; }
        .data-table thead { background-color: var(--bg-tertiary); }
        .data-table th { font-weight: 600; text-transform: uppercase; font-size: 0.8rem; letter-spacing: 0.8px; color: var(--text-secondary); }
        .data-table tbody tr:hover { background-color: rgba(var(--accent-primary-rgb), 0.1); }
        .episode-manage-list { list-style: none; margin-top: 1.5rem; max-height: 400px; overflow-y: auto; padding: 0.5rem; background-color: var(--bg-primary); border-radius: var(--border-radius); border: 1px solid var(--border-color); }
        .episode-manage-list li { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 1rem; border-bottom: 1px solid var(--border-color); transition: background-color 0.2s ease; }
        .episode-manage-list li:last-child { border-bottom: none; }
        .episode-manage-list li:hover { background-color: var(--bg-tertiary); }
        .ep-info { display: flex; align-items: center; gap: 1rem; }
        .ep-number { background-color: var(--accent-primary); color: white; font-weight: bold; width: 35px; height: 35px; border-radius: 50%; display: inline-flex; justify-content: center; align-items: center; flex-shrink: 0; }
        .ep-title { color: var(--text-primary); }
        .ep-delete-btn { background: none; border: none; color: var(--error); cursor: pointer; font-size: 1.2rem; transition: transform 0.2s, color 0.2s; }
        .ep-delete-btn:hover { transform: scale(1.2); color: #ff6b6b; }
        .no-content-message { text-align: center; color: var(--text-secondary); padding: 3rem; background: var(--bg-secondary); border-radius: var(--border-radius); border: 1px dashed var(--border-color); }
        #toast-notification { position: fixed; bottom: 2rem; right: 2rem; background-color: var(--bg-tertiary); color: var(--text-primary); padding: 1rem 1.5rem; border-radius: var(--border-radius); box-shadow: 0 5px 20px var(--shadow-color); z-index: 9999; border-left: 5px solid; opacity: 0; visibility: hidden; transform: translateX(110%); transition: all 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55); }
        #toast-notification.show { opacity: 1; visibility: visible; transform: translateX(0); }
        #toast-notification.success { border-left-color: var(--success); }
        #toast-notification.error { border-left-color: var(--error); }
        .loading-spinner { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 3rem; color: var(--accent-primary); z-index: 10; display: none; }
        .panel-loading { filter: blur(4px); opacity: 0.5; pointer-events: none; }
        .panel-loading .loading-spinner { display: block; }
        #sidebar-toggle, .mobile-header-title { display: none; }
        .sidebar-overlay { display: none; position: fixed; inset: 0; background-color: rgba(0,0,0,0.6); z-index: 999; }
        .theme-toggler { background: var(--bg-tertiary); border: 1px solid var(--border-color); border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; cursor: pointer; color: var(--text-secondary); transition: all var(--transition-speed) ease; }
        .theme-toggler:hover { color: var(--text-primary); border-color: var(--border-color-light); transform: scale(1.1) rotate(15deg); }
        .theme-toggler .fa-sun { display: none; }
        html.light-theme .theme-toggler .fa-sun { display: inline-block; }
        html.light-theme .theme-toggler .fa-moon { display: none; }
        .option-icon { width: 1em; height: 1em; margin-right: 8px; vertical-align: -0.15em; }
        @media (max-width: 992px) { #sidebar-toggle { display: inline-flex; } .main-content-header .desktop-title { display: none; } .mobile-header-title { display: block; } /* etc. */ }
    </style>
</head>
<body class="page-admin">

    <div class="sidebar-overlay"></div>
    <aside class="admin-sidebar">
        <div class="admin-sidebar-header"><a href="/admin/dashboard"><img src="/images/1.ico" alt="Logo"><span>Painel Akatsuki</span></a></div>
        <nav class="admin-nav">
            <div class="sidebar-section-title">Navegação</div>
            <ul>
                <li><a class="nav-link active" data-target="panel-dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Visão Geral</a></li>
                <li><a class="nav-link" data-target="panel-animes"><i class="fas fa-film fa-fw"></i> Animes</a></li>
                <li><a class="nav-link" data-target="panel-posts"><i class="fas fa-newspaper fa-fw"></i> Notícias</a></li>
                <li><a class="nav-link" data-target="panel-users"><i class="fas fa-users fa-fw"></i> Usuários</a></li>
            </ul>
            <div class="sidebar-section-title">Acesso Rápido</div>
            <ul>
                <li><a class="nav-link quick-action" data-action="add-anime"><i class="fas fa-plus-circle fa-fw"></i> Adicionar Anime</a></li>
                <li><a class="nav-link quick-action" data-action="add-post"><i class="fas fa-pen-alt fa-fw"></i> Escrever Notícia</a></li>
                <li><a class="nav-link" href="/" target="_blank"><i class="fas fa-external-link-alt fa-fw"></i> Ver Site</a></li>
            </ul>
        </nav>
        <div class="admin-sidebar-footer">
            <div class="user-profile-widget"><img src="<%= user.avatar || '/images/default-avatar.png' %>" alt="Avatar de <%= user.nome %>" onerror="this.onerror=null;this.src='/images/default-avatar.png';"><div class="user-info"><div class="user-name"><%= user.nome %></div><a href="/perfil/editar" class="edit-link">Editar Perfil</a></div></div>
            <a href="/auth/logout" class="btn btn--primary btn--small" style="width:100%;">Sair <i class="fas fa-sign-out-alt"></i></a>
        </div>
    </aside>

    <main class="admin-main-content">
        <div class="main-content-header">
            <button id="sidebar-toggle"><i class="fas fa-bars"></i></button>
            <h1 class="desktop-title"><i class="fas fa-tachometer-alt fa-fw"></i> Visão Geral</h1>
            <h2 class="mobile-header-title">Visão Geral</h2>
            <div style="flex-grow: 1;"></div>
            <button class="theme-toggler" id="theme-toggler" title="Alternar Tema"><i class="fas fa-moon"></i><i class="fas fa-sun"></i></button>
        </div>
        <div class="main-content-body">
            <div id="panel-dashboard" class="admin-panel active">
                 <p>Bem-vindo ao centro de comando, <strong><%= user.nome %></strong>. Use a navegação para gerenciar o conteúdo.</p>
                <div class="admin-stats">
                    <div class="stat-card"><h3>Animes Cadastrados</h3><p><%= totalAnimes %></p></div>
                    <div class="stat-card"><h3>Notícias Publicadas</h3><p><%= totalPosts %></p></div>
                    <div class="stat-card"><h3>Usuários Registrados</h3><p><%= totalUsers %></p></div>
                </div>
            </div>
            <div id="panel-animes" class="admin-panel"></div>
            <div id="panel-posts" class="admin-panel"></div>
            <div id="panel-users" class="admin-panel"></div>
        </div>
    </main>
    
    <div id="toast-notification"></div>

    <template id="template-manage-animes">
        <div class="view-header" style="margin-bottom: 1.5rem;"><button class="btn-show-form btn btn--primary"><i class="fas fa-plus-circle"></i> Adicionar Novo Anime</button></div>
        <div class="form-view" style="display: none;"><div class="admin-form-container"><h2 class="form-title">Adicionar Novo Anime</h2><form class="main-form"><input type="hidden" name="id"><div class="form-group"><label>Título</label><input type="text" name="titulo" class="input" required></div><div class="form-group"><label>Sinopse</label><textarea name="sinopse" class="textarea" rows="5" required></textarea></div><div class="form-group"><label>Ano</label><input type="number" name="anoLancamento" class="input" required></div><div class="form-group"><label>Gêneros (separados por vírgula)</label><input type="text" name="generos" class="input" required></div><div class="form-group"><label>Capa (Upload do Dispositivo)</label><input type="file" name="imagemCapaFile" class="input" accept="image/*"><div class="upload-progress-bar"><div class="upload-progress-bar-inner"></div></div><span class="upload-progress-text"></span></div><div class="form-group"><label>Nota</label><input type="number" step="0.1" name="classificacao" class="input"></div><div style="display: flex; gap: 1rem; margin-top: 1.5rem;"><button type="submit" class="btn btn--primary"><i class="fas fa-save"></i> Salvar</button><button type="button" class="btn-cancel">Cancelar</button></div></form></div></div>
        <div class="episode-manager-view" style="display: none;"><div class="admin-form-container"><h2 class="form-title-episodes">Gerenciar Episódios</h2><form class="episode-add-form"><input type="hidden" name="animeId"><h4>Adicionar Novo Episódio</h4><div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;"><div class="form-group"><label>Temporada</label><input type="number" name="temporada" class="input" required min="1" value="1"></div><div class="form-group"><label>Número do Ep.</label><input type="number" name="numero" class="input" required min="0"></div></div><div class="form-group"><label>Título (opcional)</label><input type="text" name="titulo" class="input"></div><div class="form-group"><label>Fonte do Vídeo</label><select name="tipoVideo" class="select" id="episode-type-selector"></select></div><div class="form-group" id="video-url-group"><label>URL do Vídeo</label><input type="text" name="urlVideo" class="input"></div><div class="form-group" id="video-upload-group" style="display: none;"><label>Arquivo de Vídeo</label><input type="file" name="videoFile" class="input" accept="video/*"><div class="upload-progress-bar"><div class="upload-progress-bar-inner"></div></div><span class="upload-progress-text"></span></div><button type="submit" class="btn btn--primary btn--small"><i class="fas fa-plus"></i> Adicionar Episódio</button></form><hr style="margin: 2rem 0;"><h4>Episódios Existentes</h4><div class="form-group" style="max-width: 300px;"><label>Filtrar por Temporada</label><select id="season-selector" class="select"></select></div><ul class="episode-manage-list"></ul><button type="button" class="btn btn-cancel" style="margin-top: 1.5rem;"><i class="fas fa-arrow-left"></i> Voltar</button></div></div>
        <div class="grid-view"><div class="items-grid"></div><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div></div>
    </template>
    <template id="template-manage-posts">
        <div style="margin-bottom: 1.5rem;"><button class="btn-show-form btn btn--primary"><i class="fas fa-pen-alt"></i> Adicionar Notícia</button></div>
        <div class="form-view" style="display: none;"><div class="admin-form-container"><h2 class="form-title">Adicionar Notícia</h2><form class="main-form"><input type="hidden" name="id"><div class="form-group"><label>Título</label><input type="text" name="titulo" class="input" required></div><div class="form-group"><label>Conteúdo</label><textarea name="conteudo" class="textarea" rows="10" required></textarea></div><div class="form-group"><label>URL da Imagem</label><input type="text" name="imagemDestaque" class="input"></div><div class="form-group"><label>Categoria</label><input type="text" name="categoria" class="input" value="Notícia"></div><div class="form-group"><label>Tags</label><input type="text" name="tags" class="input"></div><div class="form-group" style="display:flex;align-items:center;gap:10px"><input type="checkbox" name="emDestaque" style="width:auto;height:auto"><label style="margin-bottom:0">Destaque</label></div><div style="display: flex; gap: 1rem; margin-top: 1.5rem;"><button type="submit" class="btn btn--primary"><i class="fas fa-save"></i> Salvar</button><button type="button" class="btn btn-cancel">Cancelar</button></div></form></div></div>
        <div class="grid-view"><div class="items-grid"></div><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div></div>
    </template>
    <template id="template-manage-users">
        <div class="table-container"><table class="data-table"><thead><tr><th>Avatar</th><th>Nome</th><th>Email</th><th>Cargo</th><th>Membro Desde</th><th>Ações</th></tr></thead><tbody></tbody></table><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div></div>
    </template>
    
   <script>
    document.addEventListener('DOMContentLoaded', () => {
        // ==========================================================================
        // MÓDULO 1: ESTADO E SELETORES GLOBAIS
        // ==========================================================================
        const state = {
            loadedTabs: new Set(['dashboard']),
            currentManagedAnime: null,
            currentUserId: '<%= user.id %>'
        };
        const dom = {
            sidebar: document.querySelector('.admin-sidebar'), sidebarToggle: document.getElementById('sidebar-toggle'), sidebarOverlay: document.querySelector('.sidebar-overlay'),
            desktopTitle: document.querySelector('.desktop-title'), mobileTitle: document.querySelector('.mobile-header-title'),
            mainContentBody: document.querySelector('.main-content-body'), toast: document.getElementById('toast-notification'),
            themeToggler: document.getElementById('theme-toggler'), navLinks: document.querySelectorAll('.admin-nav .nav-link')
        };
        
        // ==========================================================================
        // MÓDULO 2: FUNÇÕES UTILITÁRIAS
        // ==========================================================================
        const showToast = (message, type = 'success') => { dom.toast.textContent = message; dom.toast.className = `show ${type}`; setTimeout(() => { dom.toast.className = ''; }, 4000); };
        const apiCall = async (endpoint, options = {}) => {
            try {
                if (!(options.body instanceof FormData)) {
                    options.headers = { 'Content-Type': 'application/json', ...options.headers };
                    if (options.body) options.body = JSON.stringify(options.body);
                }
                const response = await fetch(`/api/${endpoint}`, options);
                const data = await response.json();
                if (!response.ok || !data.success) throw new Error(data.error || 'Erro na API.');
                return data;
            } catch (err) {
                showToast(err.message, 'error');
                return { success: false };
            }
        };
        const uploadFile = (endpoint, file, form) => new Promise((resolve, reject) => {
            const formData = new FormData();
            formData.append('file', file);
            const progressBarContainer = form.querySelector('.upload-progress-bar');
            const progressText = form.querySelector('.upload-progress-text');
            if (!progressBarContainer || !progressText) return reject(new Error("Elementos de progresso não encontrados."));
            const progressBar = progressBarContainer.querySelector('.upload-progress-bar-inner');
            progressBarContainer.style.display = 'block';
            progressText.style.display = 'block';
            progressBar.style.width = '0%';
            const xhr = new XMLHttpRequest();
            xhr.open('POST', `/api/upload/${endpoint}`, true);
            xhr.upload.onprogress = e => { if (e.lengthComputable) { const p = (e.loaded / e.total) * 100; progressBar.style.width = `${p}%`; progressText.textContent = `Enviando... ${Math.round(p)}%`; }};
            xhr.onload = () => { if (xhr.status === 200) resolve(JSON.parse(xhr.responseText)); else reject(JSON.parse(xhr.responseText)); };
            xhr.onerror = () => reject({ success: false, error: 'Erro de rede.' });
            xhr.send(formData);
        });

        // ==========================================================================
        // MÓDULO 3: GERENCIAMENTO DE TEMA E SIDEBAR
        // ==========================================================================
        const applyTheme = (theme) => { document.documentElement.className = theme; localStorage.setItem('theme', theme); };
        dom.themeToggler.addEventListener('click', () => applyTheme(document.documentElement.classList.contains('dark-theme') ? 'light-theme' : 'dark-theme'));
        applyTheme(localStorage.getItem('theme') || 'dark-theme');
        const toggleSidebar = () => { dom.sidebar.classList.toggle('is-open'); dom.sidebarOverlay.classList.toggle('is-active'); };
        if (dom.sidebarToggle) dom.sidebarToggle.addEventListener('click', toggleSidebar);
        if (dom.sidebarOverlay) dom.sidebarOverlay.addEventListener('click', toggleSidebar);

        // ==========================================================================
        // MÓDULO 4: NAVEGAÇÃO E GERENCIAMENTO DE PAINÉIS
        // ==========================================================================
        const switchPanel = (targetId) => {
            dom.mainContentBody.querySelectorAll('.admin-panel').forEach(p => p.classList.remove('active'));
            const targetPanel = document.getElementById(targetId);
            if (targetPanel) {
                targetPanel.classList.add('active');
                const panelType = targetId.split('-')[1];
                if (!state.loadedTabs.has(panelType)) {
                    initPanel(panelType);
                    state.loadedTabs.add(panelType);
                }
            }
        };
        dom.navLinks.forEach(link => {
            link.addEventListener('click', e => {
                if (link.getAttribute('href') === '/') return;
                e.preventDefault();
                if (link.classList.contains('quick-action')) {
                    const panelType = link.dataset.action.includes('anime') ? 'animes' : 'posts';
                    const targetLink = document.querySelector(`.nav-link[data-target="panel-${panelType}"]`);
                    if (targetLink) { targetLink.click(); setTimeout(() => document.querySelector(`#panel-${panelType} .btn-show-form`)?.click(), 150); }
                    return;
                }
                dom.navLinks.forEach(l => l.classList.remove('active'));
                link.classList.add('active');
                dom.desktopTitle.innerHTML = link.innerHTML;
                dom.mobileTitle.textContent = link.textContent.trim();
                switchPanel(link.dataset.target);
            });
        });
        const initPanel = (type) => {
            const panel = document.getElementById(`panel-${type}`);
            const template = document.getElementById(`template-manage-${type}`);
            if (panel && template) {
                panel.innerHTML = template.innerHTML;
                const initializers = { animes: initAnimesPanel, posts: initPostsPanel, users: initUsersPanel };
                if (initializers[type]) initializers[type]();
            }
        };

        // ==========================================================================
        // MÓDULO 5: LÓGICA DO PAINEL DE ANIMES E EPISÓDIOS
        // ==========================================================================
        function initAnimesPanel() {
            const panel = document.getElementById('panel-animes');
            const views = { grid: panel.querySelector('.grid-view'), form: panel.querySelector('.form-view'), episodes: panel.querySelector('.episode-manager-view') };
            const forms = { anime: panel.querySelector('.main-form'), episode: panel.querySelector('.episode-add-form') };
            let isEditing = false, editingSlug = null;
            const showView = (view) => { Object.values(views).forEach(el => el.style.display = 'none'); if (views[view]) views[view].style.display = 'block'; const vh = panel.querySelector('.view-header'); if(vh) vh.style.display = view === 'grid' ? 'block' : 'none'; };
            const loadAnimes = async () => {
                views.grid.classList.add('panel-loading');
                const { data } = await apiCall('animes');
                views.grid.classList.remove('panel-loading');
                const grid = views.grid.querySelector('.items-grid');
                grid.innerHTML = '';
                if (!data || data.length === 0) { grid.innerHTML = '<p class="no-content-message">Nenhum anime cadastrado.</p>'; return; }
                data.sort((a, b) => b.id - a.id).forEach(anime => {
                    grid.innerHTML += `<div class="item-card" data-slug="${anime.slug}"><a href="/anime/${anime.slug}" target="_blank"><img src="${anime.imagemCapa || '/images/placeholder_poster.png'}" class="item-card__image" onerror="this.onerror=null;this.src='/images/placeholder_poster.png';"></a><div class="item-card__content"><h3 class="item-card__title">${anime.titulo}</h3><div class="item-card__meta"><span>${anime.anoLancamento}</span><span>${anime.episodios?.length || 0} Eps</span></div></div><div class="item-card__actions"><button class="btn btn--small btn-edit" title="Editar"><i class="fas fa-edit"></i></button><button class="btn btn--small btn-episodes" title="Episódios"><i class="fas fa-list-ol"></i></button><button class="btn btn--small btn-delete" title="Deletar"><i class="fas fa-trash"></i></button></div></div>`;
                });
            };
            const episodeTypes = { iframe: { label: 'iFrame/Embed', icon: `<i class="fa-solid fa-code option-icon"></i>`, needsUrl: true }, gdrive: { label: 'Google Drive', icon: `<svg class="option-icon" viewBox="0 0 38.4 33.5"><path d="M9.6,33.5l9.6-16.8h19.2L28.8,33.5H9.6z" fill="#ffc107"/><path d="M0,16.8l9.6,16.7,9.6-16.7L9.6,0,0,16.8z" fill="#1967d2"/><path d="M12.8,0l9.6,16.8h-19.2L12.8,0z" fill="#34a853"/></svg>`, needsUrl: true }, mega: { label: 'Mega.nz', icon: `<svg class="option-icon" viewBox="0 0 24 24"><path fill="#d9272e" d="M12 2A10 10 0 1 0 12 22A10 10 0 0 0 12 2ZM18.7 10.15L15.3 16.5H12.65L14.4 13.5H9.6L7.35 17.55L6.1 16.8L9.9 10.15H12.25L10.5 13.15H15.3L17.55 9.1L18.7 10.15Z"/></svg>`, needsUrl: true }, mediafire: { label: 'MediaFire', icon: `<svg class="option-icon" viewBox="0 0 24 24"><path fill="#1c98f9" d="M11.39 6.25c-.25-.26-.59-.4-1.04-.4a1.71 1.71 0 0 0-1.72 1.7c0 .95.77 1.72 1.72 1.72c.45 0 .79-.14 1.04-.4l.01-.01c.26-.26.4-.6.4-1.05c0-.44-.14-.78-.4-1.04l-.01.01Zm4.62 0c-.26-.26-.6-.4-1.05-.4c-.95 0-1.7.77-1.7 1.7c0 .95.76 1.72 1.7 1.72c.46 0 .8-.14 1.05-.4l.01-.01c.26-.26.4-.6.4-1.05c0-.44-.14-.78-.4-1.04l-.01.01ZM8.2 12.5l2.6 4.5H5L8.2 12.5Zm8.18 4.5l-2.6-4.5l3.2-4.5h5.5l-6.1 9Z"/></svg>`, needsUrl: true }, upload: { label: 'Upload Local', icon: `<i class="fa-solid fa-cloud-arrow-up option-icon"></i>`, needsUrl: false }, };
            const epTypeSelector = views.episodes.querySelector('#episode-type-selector'); epTypeSelector.innerHTML = Object.entries(episodeTypes).map(([k, v]) => `<option value="${k}">${v.icon} ${v.label}</option>`).join('');
            epTypeSelector.addEventListener('change', e => { const n = episodeTypes[e.target.value]?.needsUrl; views.episodes.querySelector('#video-url-group').style.display = n ? 'block' : 'none'; views.episodes.querySelector('#video-upload-group').style.display = !n ? 'block' : 'none'; });
            epTypeSelector.dispatchEvent(new Event('change'));
            const updateEpisodeUI = (episodes = [], selectedSeason = null) => { const s = views.episodes.querySelector('#season-selector'); const eL = views.episodes.querySelector('.episode-manage-list'); const seasons = [...new Set(episodes.map(e => e.temporada))].sort((a, b) => a - b); if (seasons.length === 0) seasons.push(1); s.innerHTML = seasons.map(s => `<option value="${s}">Temporada ${s}</option>`).join(''); s.value = selectedSeason || seasons[seasons.length - 1] || 1; eL.innerHTML = ''; episodes.filter(e => e.temporada == s.value).sort((a, b) => a.numero - b.numero).forEach(ep => { eL.innerHTML += `<li data-id="${ep.id}"><div class="ep-info"><span class="ep-number">${ep.numero}</span><span class="ep-title">${ep.titulo || `Episódio ${ep.numero}`}</span></div><button class="ep-delete-btn" title="Deletar"><i class="fas fa-trash"></i></button></li>`; }); if (eL.innerHTML === '') eL.innerHTML = `<li class="no-content-message">Nenhum episódio para esta temporada.</li>`; };
            forms.anime.addEventListener('submit', async e => { e.preventDefault(); const b = e.target.querySelector('button[type="submit"]'); b.disabled = true; b.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Salvando...'; const body = Object.fromEntries(new FormData(forms.anime).entries()); const f = body.imagemCapaFile; delete body.imagemCapaFile; if (f && f.size > 0) { try { const u = await uploadFile('capa', f, forms.anime); if (u.success) body.imagemCapa = u.filePath; else throw new Error(u.error); } catch (err) { showToast(err.message, 'error'); b.disabled = false; b.innerHTML = '<i class="fas fa-save"></i> Salvar'; return; } } body.generos = body.generos.split(',').map(g => g.trim()); const r = await apiCall(isEditing ? `animes/${editingSlug}` : 'animes', { method: isEditing ? 'PUT' : 'POST', body }); if (r.success) { showToast(`Anime ${isEditing ? 'atualizado' : 'criado'}!`, 'success'); showView('grid'); loadAnimes(); } b.disabled = false; b.innerHTML = '<i class="fas fa-save"></i> Salvar'; });
            forms.episode.addEventListener('submit', async e => { e.preventDefault(); const b = e.target.querySelector('button[type="submit"]'); b.disabled = true; b.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adicionando...'; const body = Object.fromEntries(new FormData(forms.episode).entries()); const vf = body.videoFile; delete body.videoFile; if (body.tipoVideo === 'upload' && vf && vf.size > 0) { try { const u = await uploadFile('video', vf, forms.episode); if(u.success) body.urlVideo = u.filePath; else throw new Error(u.error); } catch(err) { showToast(err.message, 'error'); b.disabled = false; b.innerHTML = '<i class="fas fa-plus"></i> Adicionar Episódio'; return; } } else if (!body.urlVideo && episodeTypes[body.tipoVideo]?.needsUrl) { showToast('URL do vídeo é obrigatória.', 'error'); b.disabled = false; b.innerHTML = '<i class="fas fa-plus"></i> Adicionar Episódio'; return; } const r = await apiCall('episodios', { method: 'POST', body }); if (r.success) { showToast('Episódio adicionado!', 'success'); e.target.reset(); epTypeSelector.dispatchEvent(new Event('change')); forms.episode.querySelector('[name="temporada"]').value = body.temporada; const { data: uA } = await apiCall(`animes/${state.currentManagedAnime.slug}`); if (uA) { state.currentManagedAnime = uA; updateEpisodeUI(uA.episodios, body.temporada); } } b.disabled = false; b.innerHTML = '<i class="fas fa-plus"></i> Adicionar Episódio'; });
            panel.addEventListener('click', async e => { const btn = e.target.closest('button'); if (!btn) return; if (btn.classList.contains('btn-show-form')) { isEditing = false; editingSlug = null; forms.anime.reset(); panel.querySelector('.form-title').textContent = 'Adicionar Novo Anime'; showView('form'); return; } if (btn.classList.contains('btn-cancel')) { showView('grid'); return; } const card = btn.closest('.item-card, li'); if (!card) return; const slug = card.dataset.slug; const id = card.dataset.id; if (btn.classList.contains('btn-edit')) { const { data } = await apiCall(`animes/${slug}`); if(data){ isEditing = true; editingSlug = slug; panel.querySelector('.form-title').textContent = 'Editar Anime'; Object.entries(data).forEach(([k,v]) => { const i = forms.anime.querySelector(`[name="${k}"]`); if(i) i.value = Array.isArray(v) ? v.join(', ') : v; }); showView('form'); } } else if (btn.classList.contains('btn-delete')) { if(confirm('Deletar este anime?')){ if((await apiCall(`animes/${slug}`, {method:'DELETE'})).success){ showToast('Anime deletado!'); loadAnimes(); } } } else if (btn.classList.contains('btn-episodes')) { const { data } = await apiCall(`animes/${slug}`); if(data){ state.currentManagedAnime = data; views.episodes.querySelector('.form-title-episodes').textContent = `Episódios de: ${data.titulo}`; views.episodes.querySelector('[name="animeId"]').value = data.id; updateEpisodeUI(data.episodios); showView('episodes'); } } else if (btn.classList.contains('ep-delete-btn')) { if(confirm('Deletar este episódio?')){ const r = await apiCall(`episodios/${id}`, {method:'DELETE'}); if(r.success){ showToast('Episódio deletado.'); state.currentManagedAnime.episodios=state.currentManagedAnime.episodios.filter(ep=>ep.id!=id); updateEpisodeUI(state.currentManagedAnime.episodios, views.episodes.querySelector('#season-selector').value); } } } });
            loadAnimes();
        }

        function initPostsPanel() {
            const panel = document.getElementById('panel-posts');
            const views = { grid: panel.querySelector('.grid-view'), form: panel.querySelector('.form-view') };
            const form = panel.querySelector('.main-form');
            let isEditing = false, editingId = null;
            const showView = (view) => { Object.values(views).forEach(el => el.style.display = 'none'); if (views[view]) views[view].style.display = 'block'; const vh = panel.querySelector('.view-header'); if(vh) vh.style.display = view === 'grid' ? 'block' : 'none'; };
            const loadPosts = async () => { views.grid.classList.add('panel-loading'); const { data } = await apiCall('posts'); views.grid.classList.remove('panel-loading'); const grid = views.grid.querySelector('.items-grid'); grid.innerHTML = ''; if (!data || data.length === 0) { grid.innerHTML = '<p class="no-content-message">Nenhuma notícia postada.</p>'; return; } data.sort((a,b) => b.id - a.id).forEach(post => { grid.innerHTML += `<div class="item-card" data-id="${post.id}" data-slug="${post.slug}"><a href="/noticias/${post.slug}" target="_blank"><img src="${post.imagemDestaque || '/images/placeholder_news.png'}" class="item-card__image"></a><div class="item-card__content"><h3 class="item-card__title">${post.titulo}</h3></div><div class="item-card__actions"><button class="btn btn--small btn-edit" title="Editar"><i class="fas fa-edit"></i></button><button class="btn btn--small btn-delete" title="Deletar"><i class="fas fa-trash"></i></button></div></div>`; }); };
            form.addEventListener('submit', async e => { e.preventDefault(); const body = Object.fromEntries(new FormData(form).entries()); body.emDestaque = !!body.emDestaque; const result = await apiCall(isEditing ? `posts/${editingId}` : 'posts', { method: isEditing ? 'PUT' : 'POST', body }); if (result.success) { showToast(`Notícia ${isEditing ? 'atualizada' : 'publicada'}!`); showView('grid'); loadPosts(); } });
            panel.addEventListener('click', async e => { const btn = e.target.closest('button'); if (!btn) return; if (btn.classList.contains('btn-show-form')) { isEditing = false; editingId = null; form.reset(); panel.querySelector('.form-title').textContent = 'Adicionar Notícia'; showView('form'); return; } if (btn.classList.contains('btn-cancel')) { showView('grid'); return; } const card = btn.closest('.item-card'); if (!card) return; const id = card.dataset.id; const slug = card.dataset.slug; if (btn.classList.contains('btn-edit')) { const { data } = await apiCall(`posts/${slug}`); if(data){ isEditing = true; editingId = id; panel.querySelector('.form-title').textContent = 'Editar Notícia'; Object.entries(data).forEach(([k,v])=>{const i=form.querySelector(`[name="${k}"]`);if(i){if(i.type==='checkbox')i.checked=v;else if(Array.isArray(v))i.value=v.join(', ');else i.value=v;}}); showView('form'); } } else if (btn.classList.contains('btn-delete')) { if(confirm('Deletar esta notícia?')){ if((await apiCall(`posts/${id}`,{method:'DELETE'})).success){ showToast('Notícia deletada!'); loadPosts(); }} } });
            loadPosts();
        }

        function initUsersPanel() {
            const panel = document.getElementById('panel-users');
            const tableBody = panel.querySelector('tbody');
            const loadUsers = async () => { panel.querySelector('.table-container').classList.add('panel-loading'); const { data } = await apiCall('users'); panel.querySelector('.table-container').classList.remove('panel-loading'); tableBody.innerHTML = ''; if (!data || data.length === 0) { tableBody.innerHTML = '<tr><td colspan="6" class="no-content-message">Nenhum usuário encontrado.</td></tr>'; return; } data.forEach(user => { tableBody.innerHTML += `<tr data-id="${user.id}"><td><img src="${user.avatar || '/images/default-avatar.png'}" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;"></td><td>${user.nome}</td><td>${user.email}</td><td>${user.role}</td><td>${new Date(user.createdAt).toLocaleDateString('pt-BR')}</td><td><button class="btn btn--small btn-delete" ${user.id == state.currentUserId ? 'disabled' : ''}><i class="fas fa-trash"></i></button></td></tr>`; }); };
            tableBody.addEventListener('click', async e => { const btn = e.target.closest('.btn-delete'); if(btn && !btn.disabled) { const id = btn.closest('tr').dataset.id; if(confirm('Deletar este usuário?')) { if((await apiCall(`users/${id}`, { method: 'DELETE' })).success) { showToast('Usuário deletado!'); loadUsers(); }} } });
            loadUsers();
        }
        
        initAnimesPanel();
    });
   </script>
</body>
</html>