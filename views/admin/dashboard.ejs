<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="icon" href="/images/1.ico" type="image/ico">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        /* ==========================================================================
           1. VARIÁVEIS GLOBAIS E RESET
           ========================================================================== */
        :root {
            --bg-primary: #0A0A0A;
            --bg-secondary: #121212;
            --bg-tertiary: #1E1E1E;
            --bg-glass: rgba(18, 18, 18, 0.65);
            --text-primary: #F0F0F0;
            --text-secondary: #A0A0A0;
            --text-tertiary: #6B7280;
            --border-color: #2E2E2E;
            --border-color-light: #444444;
            --accent-primary: #E50914;
            --accent-primary-rgb: 229, 9, 20;
            --accent-secondary: #3b82f6;
            --success: #10B981;
            --error: #EF4444;
            --warning: #F59E0B;
            --border-radius: 8px;
            --sidebar-width: 280px;
            --font-primary: 'Poppins', sans-serif;
            --shadow-color: rgba(0, 0, 0, 0.5);
            --shadow-light: rgba(0, 0, 0, 0.3);
            --accent-glow: 0 0 20px rgba(var(--accent-primary-rgb), 0.5);
            --focus-glow: 0 0 0 3px rgba(var(--accent-primary-rgb), 0.4);
            --transition-speed: 0.3s;
            --transition-curve: cubic-bezier(0.4, 0, 0.2, 1);
        }

        *, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
        html, body { height: 100%; }
        body { 
            font-family: var(--font-primary); background-color: var(--bg-primary); color: var(--text-primary); 
            line-height: 1.6; font-size: 16px; position: relative; overflow: hidden;
            -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
        }
        body.page-admin { 
            background-image: linear-gradient(rgba(10, 10, 10, 0.9), rgba(10, 10, 10, 0.9)), url('/images/berserk_legacy.jpg');
            background-size: cover; background-position: center center; background-attachment: fixed; background-repeat: no-repeat;
        }

        a { text-decoration: none; color: var(--accent-secondary); transition: color var(--transition-speed) ease; }
        a:hover { color: #60a5fa; }
        h1, h2, h3, h4 { margin-bottom: 1rem; line-height: 1.3; font-weight: 600; text-shadow: 0 2px 5px var(--shadow-light); }
        h2 { font-size: 1.75rem; }
        p { margin-bottom: 1rem; color: var(--text-secondary); }
        img { max-width: 100%; display: block; }

        /* Custom Scrollbar */
        ::-webkit-scrollbar { width: 8px; height: 8px; }
        ::-webkit-scrollbar-track { background: var(--bg-primary); }
        ::-webkit-scrollbar-thumb { background-color: var(--bg-tertiary); border-radius: 20px; border: 2px solid var(--bg-primary); }
        ::-webkit-scrollbar-thumb:hover { background-color: var(--border-color-light); }

        /* ==========================================================================
           2. COMPONENTES REUTILIZÁVEIS
           ========================================================================== */
        
        /* Botões */
        .btn { 
            padding: 0.75rem 1.25rem; border-radius: var(--border-radius); border: 1px solid var(--border-color); font-weight: 600;
            cursor: pointer; transition: all var(--transition-speed) var(--transition-curve); display: inline-flex; align-items: center; justify-content: center;
            gap: 0.5rem; background-color: var(--bg-tertiary); color: var(--text-primary); text-shadow: 0 1px 2px var(--shadow-light);
        }
        .btn:disabled { opacity: 0.5; cursor: not-allowed; transform: none !important; box-shadow: none !important; }
        .btn:hover:not(:disabled) { background-color: #333; border-color: var(--border-color-light); transform: translateY(-2px); }
        .btn:active:not(:disabled) { transform: translateY(0); }
        .btn--primary { background-color: var(--accent-primary); border-color: var(--accent-primary); color: white; box-shadow: var(--accent-glow); }
        .btn--primary:hover:not(:disabled) { background-color: #ff1c28; border-color: #ff1c28; transform: scale(1.05) translateY(-2px); }
        .btn--small { padding: 0.5rem 0.75rem; font-size: 0.9rem; }
        .btn-icon-only { padding: 0.6rem; width: 40px; height: 40px; border-radius: 50%; }

        /* Formulários */
        .form-group { margin-bottom: 1.5rem; position: relative; }
        .form-group label { display: block; margin-bottom: 0.5rem; font-weight: 500; color: var(--text-secondary); font-size: 0.9rem; }
        .input, .textarea, .select {
            width: 100%; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary);
            padding: 0.75rem 1rem; border-radius: var(--border-radius); font-family: var(--font-primary); font-size: 1rem;
            transition: all var(--transition-speed) ease;
        }
        .input:focus, .textarea:focus, .select:focus {
            outline: none; border-color: var(--accent-primary); box-shadow: var(--focus-glow);
        }
        .textarea { resize: vertical; min-height: 120px; }
        .input[type="file"] { padding: 0.5rem; }
        .input[type="file"]::file-selector-button {
            font-weight: bold; color: var(--accent-primary); background-color: var(--bg-tertiary);
            border: none; border-right: 1px solid var(--border-color); padding: 0.5rem 1rem;
            margin-right: 1rem; border-radius: var(--border-radius) 0 0 var(--border-radius);
            cursor: pointer; transition: background-color var(--transition-speed) ease;
        }
        .input[type="file"]::file-selector-button:hover { background-color: #333; }
        .upload-progress-bar {
            width: 100%; height: 8px; background-color: var(--bg-primary); border-radius: 4px;
            margin-top: 0.75rem; overflow: hidden; display: none;
        }
        .upload-progress-bar-inner {
            width: 0%; height: 100%; background-color: var(--accent-secondary); border-radius: 4px;
            transition: width 0.3s ease;
        }
        .upload-progress-text { font-size: 0.8rem; color: var(--text-secondary); margin-top: 0.25rem; display: none; }
        
        /* ÍCONES PERSONALIZADOS PARA OPÇÕES DE EPISÓDIO */
        .select-option-icon { display: inline-block; width: 16px; height: 16px; margin-right: 8px; vertical-align: middle; background-size: contain; background-repeat: no-repeat; background-position: center; }
        .icon-iframe { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23F0F0F0' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='16 18 22 12 16 6'%3E%3C/polyline%3E%3Cpolyline points='8 6 2 12 8 18'%3E%3C/polyline%3E%3C/svg%3E"); }
        .icon-gdrive { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 38.4 33.5'%3E%3Cpath d='M9.6,33.5l9.6-16.8h19.2L28.8,33.5H9.6z' fill='%23ffc107'/%3E%3Cpath d='M0,16.8l9.6,16.7,9.6-16.7L9.6,0,0,16.8z' fill='%231967d2'/%3E%3Cpath d='M12.8,0l9.6,16.8h-19.2L12.8,0z' fill='%2334a853'/%3E%3C/svg%3E"); }
        .icon-mediafire { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%231c98f9' d='M11.39 6.25c-.25-.26-.59-.4-1.04-.4a1.71 1.71 0 0 0-1.72 1.7c0 .95.77 1.72 1.72 1.72c.45 0 .79-.14 1.04-.4l.01-.01c.26-.26.4-.6.4-1.05c0-.44-.14-.78-.4-1.04l-.01.01Zm4.62 0c-.26-.26-.6-.4-1.05-.4c-.95 0-1.7.77-1.7 1.7c0 .95.76 1.72 1.7 1.72c.46 0 .8-.14 1.05-.4l.01-.01c.26-.26.4-.6.4-1.05c0-.44-.14-.78-.4-1.04l-.01.01ZM8.2 12.5l2.6 4.5H5L8.2 12.5Zm8.18 4.5l-2.6-4.5l3.2-4.5h5.5l-6.1 9Z'/%3E%3C/svg%3E"); }
        .icon-mega { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23d9272e' d='M12 2A10 10 0 1 0 12 22A10 10 0 0 0 12 2ZM18.7 10.15L15.3 16.5H12.65L14.4 13.5H9.6L7.35 17.55L6.1 16.8L9.9 10.15H12.25L10.5 13.15H15.3L17.55 9.1L18.7 10.15Z'/%3E%3C/svg%3E"); }
        .icon-mediabox { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23e67e22' d='M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-9 15V6l7 6-7 6z'/%3E%3C/svg%3E"); }
        .icon-upload { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23F0F0F0' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4'%3E%3C/path%3E%3Cpolyline points='17 8 12 3 7 8'%3E%3C/polyline%3E%3Cline x1='12' y1='3' x2='12' y2='15'%3E%3C/line%3E%3C/svg%3E"); }

        /* ==========================================================================
           3. LAYOUT PRINCIPAL E PAINÉIS
           ========================================================================== */
        
        /* Remainder of your CSS is the same... */
        body.page-admin { display: flex; height: 100vh; }
        .admin-sidebar { width: var(--sidebar-width); background-color: var(--bg-secondary); border-right: 1px solid var(--border-color); flex-shrink: 0; display: flex; flex-direction: column; box-shadow: 5px 0 25px var(--shadow-light); z-index: 1000; transition: transform var(--transition-curve) var(--transition-speed); }
        .admin-sidebar-header { text-align: center; padding: 1.5rem 1rem; flex-shrink: 0; background: linear-gradient(to bottom, rgba(0,0,0,0.2), transparent); }
        .admin-sidebar-header a { display: inline-flex; align-items: center; gap: 0.75rem; font-size: 1.3rem; font-weight: 700; color: var(--text-primary); }
        .admin-sidebar-header img { height: 40px; filter: drop-shadow(0 0 8px var(--accent-primary)); transition: transform var(--transition-speed) ease; }
        .admin-sidebar-header a:hover img { transform: rotate(15deg) scale(1.1); }
        .sidebar-section-title { font-size: 0.75rem; font-weight: 600; text-transform: uppercase; letter-spacing: 1px; color: var(--text-tertiary); padding: 0 1.5rem; margin: 1.5rem 0 0.5rem; }
        .admin-nav { list-style: none; flex-grow: 1; overflow-y: auto; padding: 0 1rem; }
        .admin-nav .nav-link { display: flex; align-items: center; gap: 1rem; padding: 0.75rem 1rem; margin-bottom: 0.5rem; border-radius: var(--border-radius); color: var(--text-secondary); font-weight: 500; transition: all 0.2s ease; cursor: pointer; border-left: 4px solid transparent; }
        .admin-nav .nav-link:hover { background-color: var(--bg-tertiary); color: var(--text-primary); }
        .admin-nav .nav-link.active { background: linear-gradient(90deg, rgba(var(--accent-primary-rgb), 0.15) 0%, rgba(var(--accent-primary-rgb), 0) 100%); color: var(--accent-primary); border-left-color: var(--accent-primary); font-weight: 600; text-shadow: 0 0 10px rgba(var(--accent-primary-rgb), 0.5); }
        .admin-nav .nav-link i { width: 20px; text-align: center; font-size: 1.2rem; }
        .admin-sidebar-footer { padding: 1rem; border-top: 1px solid var(--border-color); flex-shrink: 0; background-color: rgba(0,0,0,0.2); }
        .user-profile-widget { display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1rem; padding: 0.5rem; border-radius: var(--border-radius); transition: background-color var(--transition-speed) ease; }
        .user-profile-widget:hover { background-color: var(--bg-tertiary); }
        .user-profile-widget img { width: 45px; height: 45px; border-radius: 50%; object-fit: cover; border: 2px solid var(--border-color); transition: border-color var(--transition-speed) ease; }
        .user-profile-widget:hover img { border-color: var(--accent-primary); }
        .user-profile-widget .user-info { line-height: 1.2; overflow: hidden; }
        .user-profile-widget .user-name { font-weight: 600; color: var(--text-primary); white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .user-profile-widget .edit-link { font-size: 0.8rem; color: var(--text-tertiary); }
        .user-profile-widget .edit-link:hover { color: var(--accent-secondary); text-decoration: underline; }
        .admin-main-content { flex-grow: 1; display: flex; flex-direction: column; height: 100vh; background-color: var(--bg-glass); backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px); border-left: 1px solid var(--border-color); position: relative; }
        .main-content-header { padding: 1.5rem 2rem; flex-shrink: 0; display: flex; align-items: center; gap: 1rem; border-bottom: 1px solid var(--border-color); background-color: rgba(18, 18, 18, 0.5); }
        .main-content-header h1 { margin: 0; flex-grow: 1; display: flex; align-items: center; gap: 1rem; }
        .main-content-body { padding: 2rem; overflow-y: auto; flex-grow: 1; }
        .admin-panel { display: none; animation: fadeIn 0.5s var(--transition-curve); }
        .admin-panel.active { display: block; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(15px); } to { opacity: 1; transform: translateY(0); } }
        .admin-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem; margin-top: 1rem; }
        .stat-card { background: linear-gradient(145deg, var(--bg-tertiary), var(--bg-secondary)); padding: 1.5rem; border-radius: var(--border-radius); border-left: 4px solid var(--accent-primary); transition: all var(--transition-speed) var(--transition-curve); box-shadow: 0 4px 15px var(--shadow-color); }
        .stat-card:hover { transform: translateY(-5px); box-shadow: 0 8px 25px var(--shadow-color), var(--accent-glow); }
        .stat-card h3 { font-size: 0.9rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; color: var(--text-secondary); margin: 0; }
        .stat-card p { font-size: 2.5rem; font-weight: 700; color: var(--text-primary); margin: 0.5rem 0 0 0; }
        .items-grid { display: grid; gap: 1.5rem; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); }
        .item-card { background-color: var(--bg-secondary); border: 1px solid var(--border-color); box-shadow: 0 4px 15px var(--shadow-color); border-radius: var(--border-radius); display: flex; flex-direction: column; overflow: hidden; transition: all var(--transition-speed) var(--transition-curve); position: relative; }
        .item-card:hover { transform: translateY(-8px); box-shadow: 0 10px 30px rgba(0,0,0,0.7); border-color: var(--border-color-light); }
        .item-card__image { width: 100%; height: 300px; object-fit: cover; border-bottom: 1px solid var(--border-color); background-color: var(--bg-primary); }
        .item-card__content { padding: 1rem; flex-grow: 1; display: flex; flex-direction: column; }
        .item-card__title { font-size: 1.1rem; font-weight: 600; color: var(--text-primary); margin-bottom: 0.5rem; line-height: 1.3; flex-grow: 1; }
        .item-card__meta { font-size: 0.8rem; color: var(--text-secondary); display: flex; justify-content: space-between; gap: 0.5rem; flex-wrap: wrap; }
        .item-card__actions { display: flex; gap: 0.5rem; padding: 0 1rem 1rem; }
        .item-card__actions .btn { background-color: var(--bg-tertiary); }
        .item-card__actions .btn:hover { background-color: #333; }
        .view-controls { display: flex; justify-content: space-between; align-items: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 2rem; }
        .search-container { position: relative; }
        .search-input { background-color: var(--bg-secondary); border: 1px solid var(--border-color); color: var(--text-primary); padding: 0.6rem 1rem 0.6rem 2.5rem; border-radius: var(--border-radius); font-size: 1rem; min-width: 280px; transition: all var(--transition-speed) ease; }
        .search-input:focus { outline: none; border-color: var(--accent-primary); box-shadow: var(--focus-glow); }
        .search-container .fa-search { position: absolute; left: 1rem; top: 50%; transform: translateY(-50%); color: var(--text-tertiary); }
        .admin-form-container { padding: 2.5rem; background-color: var(--bg-secondary); border-radius: var(--border-radius); margin-top: 1rem; max-width: 800px; margin-left: auto; margin-right: auto; border: 1px solid var(--border-color); }
        .table-container { background-color: var(--bg-secondary); border-radius: var(--border-radius); border: 1px solid var(--border-color); overflow: hidden; }
        .data-table { width: 100%; border-collapse: collapse; white-space: nowrap; }
        .data-table th, .data-table td { padding: 1rem 1.25rem; text-align: left; border-bottom: 1px solid var(--border-color); vertical-align: middle; }
        .data-table thead { background-color: var(--bg-tertiary); }
        .data-table th { font-weight: 600; text-transform: uppercase; font-size: 0.8rem; letter-spacing: 0.8px; color: var(--text-secondary); }
        .data-table tbody tr { transition: background-color 0.2s ease; }
        .data-table tbody tr:nth-child(even) { background-color: rgba(0,0,0,0.2); }
        .data-table tbody tr:hover { background-color: rgba(var(--accent-primary-rgb), 0.1); }
        .data-table .user-avatar { width: 40px; height: 40px; border-radius: 50%; object-fit: cover; border: 2px solid var(--border-color); }
        .episode-manage-list { list-style: none; margin-top: 1.5rem; max-height: 400px; overflow-y: auto; padding: 0.5rem; background-color: var(--bg-primary); border-radius: var(--border-radius); border: 1px solid var(--border-color); }
        .episode-manage-list li { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 1rem; border-bottom: 1px solid var(--border-color); transition: background-color 0.2s ease; }
        .episode-manage-list li:last-child { border-bottom: none; }
        .episode-manage-list li:hover { background-color: var(--bg-tertiary); }
        .ep-info { display: flex; align-items: center; gap: 1rem; }
        .ep-number { background-color: var(--accent-primary); color: white; font-weight: bold; width: 35px; height: 35px; border-radius: 50%; display: inline-flex; justify-content: center; align-items: center; flex-shrink: 0; }
        .ep-delete-btn { background: none; border: none; color: var(--error); cursor: pointer; font-size: 1.2rem; transition: transform 0.2s, color 0.2s; }
        .ep-delete-btn:hover { transform: scale(1.2); color: #ff6b6b; }
        .no-content-message { text-align: center; color: var(--text-secondary); padding: 3rem; background: var(--bg-secondary); border-radius: var(--border-radius); border: 1px dashed var(--border-color); }
        #toast-notification { position: fixed; bottom: 2rem; right: 2rem; background-color: var(--bg-tertiary); color: var(--text-primary); padding: 1rem 1.5rem; border-radius: var(--border-radius); box-shadow: 0 5px 20px var(--shadow-color); z-index: 9999; border-left: 5px solid; opacity: 0; visibility: hidden; transform: translateX(110%); transition: all 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55); }
        #toast-notification.show { opacity: 1; visibility: visible; transform: translateX(0); }
        #toast-notification.success { border-left-color: var(--success); }
        #toast-notification.error { border-left-color: var(--error); }
        .loading-spinner { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 3rem; color: var(--accent-primary); z-index: 10; display: none; }
        .panel-loading .grid-view, .panel-loading .admin-form-container, .panel-loading .table-view, .panel-loading .view-controls { filter: blur(4px); opacity: 0.5; pointer-events: none; }
        .panel-loading .loading-spinner { display: block; }
        #sidebar-toggle, .mobile-header-title { display: none; }
        .sidebar-overlay { display: none; position: fixed; inset: 0; background-color: rgba(0,0,0,0.6); z-index: 999; }
        @media (max-width: 992px) { .admin-sidebar { position: fixed; top: 0; left: 0; height: 100%; transform: translateX(-100%); } .admin-sidebar.is-open { transform: translateX(0); } .sidebar-overlay.is-active { display: block; } #sidebar-toggle { display: inline-flex; background: none; border: none; color: var(--text-primary); font-size: 1.5rem; padding: 0.5rem; cursor: pointer; } .main-content-header .desktop-title { display: none; } .mobile-header-title { display: block; font-size: 1.2rem; font-weight: 600; color: var(--text-primary); margin: 0; flex-grow: 1; text-align: center; } .main-content-body { padding: 1.5rem; } .view-controls { flex-direction: column; align-items: stretch; gap: 1rem; } .search-input { min-width: 100%; } .items-grid { grid-template-columns: repeat(2, 1fr); gap: 1rem; } .item-card__image { height: 250px; } .item-card:hover { transform: translateY(-5px); } .stat-card:hover { transform: none; box-shadow: 0 4px 15px var(--shadow-color); } }
        @media (max-width: 576px) { .items-grid { grid-template-columns: 1fr; } .item-card__image { height: 350px; } }
    </style>
    <!-- Script de proteção chamado com 'defer' para não bloquear o carregamento -->
    <script src="/js/protect.js" defer></script>
</head>
<body class="page-admin">

    <div class="sidebar-overlay"></div>
    <aside class="admin-sidebar">
        <div class="admin-sidebar-header"><a href="/admin/dashboard"><img src="/images/1.ico" alt="Logo"><span>Painel Akatsuki</span></a></div>
        <nav class="admin-nav">
            <div class="sidebar-section-title">Navegação</div>
            <ul>
                <li><a class="nav-link" data-target="panel-dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Visão Geral</a></li>
                <li><a class="nav-link" data-target="panel-animes"><i class="fas fa-film fa-fw"></i> Animes</a></li>
                <li><a class="nav-link" data-target="panel-posts"><i class="fas fa-newspaper fa-fw"></i> Notícias</a></li>
                <li><a class="nav-link" data-target="panel-users"><i class="fas fa-users fa-fw"></i> Usuários</a></li>
            </ul>
            <div class="sidebar-section-title">Acesso Rápido</div>
            <ul>
                <li><a class="nav-link quick-action" data-action="add-anime"><i class="fas fa-plus-circle fa-fw"></i> Adicionar Anime</a></li>
                <li><a class="nav-link quick-action" data-action="add-post"><i class="fas fa-pen-alt fa-fw"></i> Escrever Notícia</a></li>
                <li><a class="nav-link" href="/" target="_blank"><i class="fas fa-external-link-alt fa-fw"></i> Ver Site</a></li>
            </ul>
        </nav>
        <div class="admin-sidebar-footer">
            <div class="user-profile-widget"><img src="<%= user.avatar || '/images/default-avatar.png' %>" alt="Avatar de <%= user.nome %>" onerror="this.onerror=null;this.src='/images/default-avatar.png';"><div class="user-info"><div class="user-name"><%= user.nome %></div><a href="/perfil/editar" class="edit-link">Editar Perfil</a></div></div>
            <a href="/auth/logout" class="btn btn--primary btn--small" style="width:100%;">Sair <i class="fas fa-sign-out-alt"></i></a>
        </div>
    </aside>

    <main class="admin-main-content">
        <div class="main-content-header">
            <button id="sidebar-toggle"><i class="fas fa-bars"></i></button>
            <h1 class="desktop-title"></h1>
            <h2 class="mobile-header-title"></h2>
        </div>
        <div class="main-content-body">
            <div id="panel-dashboard" class="admin-panel"><p>Bem-vindo ao centro de comando, <strong><%= user.nome %></strong>. Use a navegação para gerenciar o conteúdo.</p><div class="admin-stats"><div class="stat-card"><h3>Animes Cadastrados</h3><p><%= totalAnimes %></p></div><div class="stat-card"><h3>Notícias Publicadas</h3><p><%= totalPosts %></p></div><div class="stat-card"><h3>Usuários Registrados</h3><p><%= totalUsers %></p></div></div></div>
            <div id="panel-animes" class="admin-panel"></div>
            <div id="panel-posts" class="admin-panel"></div>
            <div id="panel-users" class="admin-panel"></div>
        </div>
    </main>
    
    <div id="toast-notification"></div>

    <template id="template-manage-animes">
        <div style="margin-bottom: 1.5rem;"><button class="btn-show-form btn btn--primary"><i class="fas fa-plus-circle"></i><span class="btn-text"> Adicionar Novo Anime</span></button></div>
        <div class="form-view" style="display: none;"><div class="admin-form-container"><h2 class="form-title">Adicionar Novo Anime</h2><form class="main-form" enctype="multipart/form-data"><input type="hidden" name="id"><input type="hidden" name="imagemCapa"><div class="form-group"><label for="titulo-anime">Título</label><input type="text" id="titulo-anime" name="titulo" class="input" required></div><div class="form-group"><label for="sinopse-anime">Sinopse</label><textarea id="sinopse-anime" name="sinopse" class="input" rows="5" required></textarea></div><div class="form-group"><label for="ano-anime">Ano</label><input type="number" id="ano-anime" name="anoLancamento" class="input" required></div><div class="form-group"><label for="generos-anime">Gêneros</label><input type="text" id="generos-anime" name="generos" class="input" required></div><div class="form-group"><label for="capa-anime">Capa</label><input type="file" id="capa-anime" name="imagem" class="input" accept="image/*"></div><div class="form-group"><label for="nota-anime">Nota</label><input type="number" id="nota-anime" step="0.1" name="classificacao" class="input"></div><div style="display: flex; gap: 1rem; margin-top: 1.5rem;"><button type="submit" class="btn btn--primary"><i class="fas fa-save"></i> Salvar</button><button type="button" class="btn btn--secondary btn-cancel">Cancelar</button></div></form></div></div>
        <div class="episode-manager-view" style="display: none;"><div class="admin-form-container"><h2 class="form-title">Episódios</h2><form class="episode-add-form"><input type="hidden" name="animeId"><h4>Adicionar Episódio</h4><div class="form-group"><label for="ep-numero">Número</label><input type="number" id="ep-numero" name="numero" class="input" required></div><div class="form-group"><label for="ep-titulo">Título</label><input type="text" id="ep-titulo" name="titulo" class="input" required></div><div class="form-group"><label for="ep-url">URL</label><input type="text" id="ep-url" name="urlVideo" class="input" required></div><div class="form-group"><label for="ep-tipo">Tipo</label><select id="ep-tipo" name="tipoVideo" class="input"><option value="iframe">iFrame</option><option value="gdrive">Google Drive</option></select></div><button type="submit" class="btn btn--primary btn--small">Adicionar</button></form><hr style="margin: 2rem 0; border-color: var(--border-color);"><h4>Episódios Existentes</h4><ul class="episode-manage-list"></ul><button type="button" class="btn btn--secondary btn-cancel" style="margin-top: 1.5rem;">Voltar</button></div></div>
        <div class="grid-view"><div class="items-grid"></div><div class="view-more-container" style="display: none;"><button class="btn btn-view-more"><i class="fas fa-plus"></i> Ver Mais</button></div><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div></div>
    </template>
    
    <template id="template-manage-posts">
        <div style="margin-bottom: 1.5rem;"><button class="btn-show-form btn btn--primary"><i class="fas fa-plus-circle"></i><span class="btn-text"> Adicionar Nova Notícia</span></button></div>
        <div class="form-view" style="display: none;"><div class="admin-form-container"><h2 class="form-title">Adicionar Notícia</h2><form class="main-form" enctype="multipart/form-data"><input type="hidden" name="id"><input type="hidden" name="imagemDestaque"><div class="form-group"><label for="titulo-post">Título</label><input type="text" id="titulo-post" name="titulo" class="input" required></div><div class="form-group"><label for="conteudo-post">Conteúdo</label><textarea id="conteudo-post" name="conteudo" class="input" rows="10" required></textarea></div><div class="form-group"><label for="imagem-post">Imagem</label><input type="file" id="imagem-post" name="imagem" class="input" accept="image/*"></div><div class="form-group"><label for="categoria-post">Categoria</label><input type="text" id="categoria-post" name="categoria" class="input" value="Notícia"></div><div class="form-group"><label for="tags-post">Tags</label><input type="text" id="tags-post" name="tags" class="input"></div><div class="form-group" style="display:flex;align-items:center;gap:10px"><input type="checkbox" id="destaque-post" name="emDestaque" style="width:auto;height:auto"><label for="destaque-post" style="margin-bottom:0">Destaque</label></div><div style="display: flex; gap: 1rem; margin-top: 1.5rem;"><button type="submit" class="btn btn--primary"><i class="fas fa-save"></i> Salvar</button><button type="button" class="btn btn--secondary btn-cancel">Cancelar</button></div></form></div></div>
        <div class="grid-view"><div class="items-grid"></div><div class="view-more-container" style="display: none;"><button class="btn btn-view-more"><i class="fas fa-plus"></i> Ver Mais</button></div><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div></div>
    </template>

    <template id="template-manage-users">
        <div class="table-view"><div class="table-container"><table class="data-table"><thead><tr><th>Avatar</th><th>Nome</th><th>Email</th><th>Cargo</th><th>Membro Desde</th><th>Ações</th></tr></thead><tbody class="table-body"></tbody></table></div><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div></div>
    </template>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sidebar = document.querySelector('.admin-sidebar');
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebarOverlay = document.querySelector('.sidebar-overlay');
            const desktopTitle = document.querySelector('.main-content-header .desktop-title');
            const mobileTitle = document.querySelector('.main-content-header .mobile-header-title');
            const mainContentBody = document.querySelector('.main-content-body');
            const toast = document.getElementById('toast-notification');
            const loadedTabs = new Set();
            const currentUserId = Number('<%= user.id %>');
            const ITEMS_PER_PAGE = 18;

            const toggleSidebar = () => { sidebar.classList.toggle('is-open'); sidebarOverlay.classList.toggle('is-active'); };
            if (sidebarToggle && sidebarOverlay) {
                sidebarToggle.addEventListener('click', toggleSidebar);
                sidebarOverlay.addEventListener('click', toggleSidebar);
            }

            const showToast = (message, type = 'success') => {
                toast.textContent = message;
                toast.className = `show ${type}`;
                setTimeout(() => { toast.className = ''; }, 5000);
            };

            const api = async (endpoint, options = {}) => {
                try {
                    const response = await fetch(`/api/${endpoint}`, options);
                    const text = await response.text();
                    if (!response.ok) {
                        let errorMsg = `Erro do Servidor: ${response.status}`;
                        try { const errorData = JSON.parse(text); errorMsg = errorData.error || errorMsg; } catch (e) { /* ignore */ }
                        throw new Error(errorMsg);
                    }
                    return text ? JSON.parse(text) : {};
                } catch (err) {
                    console.error(`API Error on ${endpoint}:`, err);
                    showToast(err.message, 'error');
                    return { success: false, error: err.message };
                }
            };

            const updateMainHeader = (htmlContent, textContent) => {
                if (desktopTitle) desktopTitle.innerHTML = htmlContent;
                if (mobileTitle) mobileTitle.textContent = textContent || desktopTitle?.textContent || 'Painel';
            };

            const handleNavigation = (link) => {
                if (!link) return;
                const targetId = link.dataset.target;
                const titleHTML = link.innerHTML;
                const titleText = link.textContent.trim();
                document.querySelectorAll('.admin-nav .nav-link').forEach(l => l.classList.remove('active'));
                link.classList.add('active');
                mainContentBody.querySelectorAll('.admin-panel').forEach(p => p.classList.remove('active'));
                const targetPanel = document.getElementById(targetId);
                if (targetPanel) targetPanel.classList.add('active');
                updateMainHeader(titleHTML, titleText);
                const type = targetId.split('-')[1];
                if (type && type !== 'dashboard' && !loadedTabs.has(type)) {
                    initManager(type);
                    loadedTabs.add(type);
                }
                mainContentBody.scrollTop = 0;
                if (window.innerWidth <= 992 && sidebar.classList.contains('is-open')) toggleSidebar();
            };

            document.querySelector('.admin-nav').addEventListener('click', (e) => {
                const link = e.target.closest('a.nav-link');
                if (!link) return;
                if (link.target !== '_blank') e.preventDefault(); else return;
                if (link.classList.contains('quick-action')) {
                    const action = link.dataset.action;
                    const targetLink = action === 'add-anime' ? document.querySelector('.nav-link[data-target="panel-animes"]') : document.querySelector('.nav-link[data-target="panel-posts"]');
                    if (targetLink) { targetLink.click(); setTimeout(() => { const btn = document.querySelector(`#panel-${action.includes('anime') ? 'animes' : 'posts'} .btn-show-form`); if(btn) btn.click(); }, 100); }
                } else { handleNavigation(link); }
            });
            
            document.querySelector('.nav-link[data-target="panel-dashboard"]').click();

            function initManager(type) {
                const template = document.getElementById(`template-manage-${type}`);
                if (!template) return;
                const content = template.content.cloneNode(true);
                const targetPanel = document.getElementById(`panel-${type}`);
                targetPanel.innerHTML = '';
                targetPanel.appendChild(content);
                const views = { form: targetPanel.querySelector('.form-view'), table: targetPanel.querySelector('.table-view'), grid: targetPanel.querySelector('.grid-view'), episodes: targetPanel.querySelector('.episode-manager-view') };
                const mainForm = targetPanel.querySelector('.main-form');
                let isEditing = false, editingId = null;

                const showView = (viewName) => {
                    const isGridView = type === 'posts' || type === 'animes';
                    const defaultView = isGridView ? 'grid' : 'table';
                    if (viewName === 'default') viewName = defaultView;
                    Object.values(views).filter(v => v).forEach(v => { if (v) v.style.display = 'none'; });
                    if (views[viewName]) {
                        views[viewName].style.display = 'block';
                        const addBtnContainer = targetPanel.querySelector('div[style*="margin-bottom"]');
                        if (addBtnContainer) addBtnContainer.style.display = (viewName === defaultView) ? 'block' : 'none';
                    }
                };

                const renderGrid = (items, itemType) => {
                    const gridContainer = targetPanel.querySelector('.items-grid');
                    const viewMoreContainer = targetPanel.querySelector('.view-more-container');
                    gridContainer.innerHTML = '';
                    if (!items || items.length === 0) {
                        gridContainer.innerHTML = `<p style="grid-column: 1 / -1; text-align: center; color: var(--text-secondary); padding: 40px;">Nenhum item encontrado.</p>`;
                        if(viewMoreContainer) viewMoreContainer.style.display = 'none'; return;
                    }
                    items.forEach((item, index) => {
                        const card = document.createElement('div');
                        card.className = 'item-card';
                        card.dataset.id = item.id;
                        if (index >= ITEMS_PER_PAGE) card.classList.add('hidden-item');
                        let cardHTML = '';
                        if (itemType === 'animes') {
                            cardHTML = `<img src="${item.imagemCapa || '/images/placeholder_poster.png'}" alt="Capa" class="item-card__image item-card__image--poster" onerror="this.onerror=null;this.src='/images/placeholder_poster.png';"><div class="item-card__content"><h3 class="item-card__title">${item.titulo}</h3><div class="item-card__meta"><span><i class="fas fa-calendar-alt fa-fw"></i> ${item.anoLancamento}</span><span><i class="fas fa-list-ol fa-fw"></i> ${item.episodios ? item.episodios.length : 0}</span></div></div><div class="item-card__actions"><button title="Editar" class="btn btn--small btn--secondary btn-edit"><i class="fas fa-edit"></i><span class="btn-text"> Editar</span></button><button title="Episódios" class="btn btn--small btn--secondary btn-episodes"><i class="fas fa-list-ol"></i><span class="btn-text"> Eps</span></button><button title="Deletar" class="btn btn--small btn--secondary btn-delete"><i class="fas fa-trash"></i></button></div>`;
                        } else if (itemType === 'posts') {
                            cardHTML = `<img src="${item.imagemDestaque || '/images/placeholder_news.png'}" alt="Imagem" class="item-card__image item-card__image--landscape" onerror="this.onerror=null;this.src='/images/placeholder_news.png';"><div class="item-card__content"><h3 class="item-card__title">${item.titulo}</h3><div class="item-card__meta"><span>Por ${item.autor?.nome || 'Desconhecido'}</span><span>${new Date(item.createdAt).toLocaleDateString('pt-BR')}</span></div></div><div class="item-card__actions"><button title="Editar" class="btn btn--small btn--secondary btn-edit"><i class="fas fa-edit"></i> <span class="btn-text">Editar</span></button><button title="Deletar" class="btn btn--small btn--secondary btn-delete"><i class="fas fa-trash"></i> <span class="btn-text">Deletar</span></button></div>`;
                        }
                        card.innerHTML = cardHTML;
                        gridContainer.appendChild(card);
                    });
                    if (items.length > ITEMS_PER_PAGE) { if(viewMoreContainer) viewMoreContainer.style.display = 'block'; } else { if(viewMoreContainer) viewMoreContainer.style.display = 'none'; }
                };
                
                const renderTable = (items) => {
                    const tableBody = targetPanel.querySelector('.table-body');
                    if(!tableBody) return;
                    tableBody.innerHTML = '';
                    if (!items || items.length === 0) { tableBody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding: 40px;">Nenhum usuário encontrado.</td></tr>`; return; }
                    items.forEach(item => {
                        const row = document.createElement('tr');
                        row.dataset.id = item.id;
                        row.innerHTML = `<td><img src="${item.avatar || '/images/default-avatar.png'}" width="40" height="40" style="border-radius: 50%; object-fit: cover;" onerror="this.onerror=null;this.src='/images/default-avatar.png';"/></td><td>${item.nome}</td><td>${item.email}</td><td>${item.role}</td><td>${new Date(item.createdAt).toLocaleDateString('pt-BR')}</td><td class="actions-cell"><button title="Deletar" class="btn btn--small btn-delete" ${item.id === currentUserId ? 'disabled title="Você não pode deletar a si mesmo"' : ''}><i class="fas fa-trash"></i></button></td>`;
                        tableBody.appendChild(row);
                    });
                };

                const loadData = async () => {
                    targetPanel.classList.add('loading');
                    const { data } = await api(type);
                    if (data) {
                        if (type === 'animes' || type === 'posts') renderGrid(data, type);
                        else if (type === 'users') renderTable(data);
                    }
                    targetPanel.classList.remove('loading');
                };

                targetPanel.addEventListener('click', async (e) => {
                    const button = e.target.closest('button');
                    if (!button || button.disabled) return;
                    if (button.classList.contains('btn-view-more')) { targetPanel.querySelectorAll('.item-card.hidden-item').forEach(card => card.classList.remove('hidden-item')); button.parentElement.style.display = 'none'; return; }
                    const parentElement = button.closest('tr') || button.closest('.item-card');
                    const id = parentElement?.dataset.id;
                    if (button.classList.contains('btn-show-form')) { mainForm.reset(); isEditing = false; editingId = null; targetPanel.querySelector('.form-title').textContent = `Adicionar Novo ${type.slice(0,-1)}`; showView('form'); }
                    else if (button.classList.contains('btn-cancel')) { showView('default'); }
                    else if (button.classList.contains('btn-delete') && id) {
                        if (confirm('Tem certeza? A ação é irreversível.')) {
                            const result = await api(`${type}/${id}`, { method: 'DELETE' });
                            if (result.success) { showToast('Item deletado com sucesso!', 'success'); loadData(); }
                        }
                    } else if (button.classList.contains('btn-edit') && id) {
                        const { data: itemData } = await api(`${type}/${id}`);
                        if (!itemData) return;
                        isEditing = true; editingId = id;
                        targetPanel.querySelector('.form-title').textContent = `Editar ${type.slice(0, -1)}`;
                        Object.keys(itemData).forEach(key => {
                            const input = mainForm.querySelector(`[name="${key}"]`);
                            if(input) {
                                if(input.type === 'checkbox') input.checked = itemData[key];
                                else input.value = Array.isArray(itemData[key]) ? itemData[key].join(', ') : itemData[key];
                            }
                        });
                        showView('form');
                    } else if (button.classList.contains('btn-episodes') && id) {
                        const { data: anime } = await api(`animes/${id}`);
                        if (!anime) return;
                        const epManager = views.episodes;
                        epManager.querySelector('[name="animeId"]').value = anime.id;
                        epManager.querySelector('.form-title').innerText = `Episódios de: ${anime.titulo}`;
                        // renderEpisodeList(anime.episodios || []);
                        showView('episodes');
                    }
                });
                
                if (mainForm) { 
                    mainForm.addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const submitButton = mainForm.querySelector('button[type="submit"]');
                        const originalButtonContent = submitButton.innerHTML;
                        submitButton.disabled = true; submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Salvando...';
                        const formData = new FormData(mainForm);
                        const fileInput = mainForm.querySelector('input[type="file"]');
                        if (fileInput && fileInput.files[0]) {
                            const uploadFormData = new FormData();
                            uploadFormData.append('imagem', fileInput.files[0]);
                            const uploadResult = await api('upload/image', { method: 'POST', body: uploadFormData });
                            if (!uploadResult.success) {
                                showToast(uploadResult.error, 'error');
                                submitButton.disabled = false; submitButton.innerHTML = originalButtonContent; return;
                            }
                            const imageFieldName = type === 'animes' ? 'imagemCapa' : 'imagemDestaque';
                            formData.set(imageFieldName, uploadResult.filePath);
                        }
                        const body = Object.fromEntries(formData.entries());
                        delete body.imagem;
                        const endpoint = isEditing ? `${type}/${editingId}` : type;
                        const method = isEditing ? 'PUT' : 'POST';
                        const result = await api(endpoint, { method, headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body) });
                        if (result.success) { 
                            showToast('Salvo com sucesso!', 'success'); 
                            showView('default'); 
                            loadData();
                        } else {
                            showToast(result.error || 'Erro ao salvar.', 'error');
                        }
                        submitButton.disabled = false; submitButton.innerHTML = originalButtonContent;
                    });
                }
                
                loadData();
            }
        });
    </script>
</body>
</html>