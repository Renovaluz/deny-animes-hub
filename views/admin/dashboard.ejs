<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="icon" href="/images/1.ico" type="image/ico">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="/js/protect.js" defer></script>
    <style>
    /* ================================================================================================== */
    /*      ESTILIZAÇÃO CSS COMPLETA E FINAL - NÍVEL RINNEGAN REBIRTH                                     */
    /* ================================================================================================== */

    /* --- ARQUITETURA DE TEMAS --- */
    :root {
        /* TEMA ESCURO (PADRÃO AKATSUKI) */
        --theme-bg-primary: #0B0B0B;
        --theme-bg-secondary: #141414;
        --theme-bg-tertiary: #222222;
        --theme-text-primary: #F5F5F5;
        --theme-text-secondary: #A0A0A0;
        --theme-accent-primary: #E50914;
        --theme-accent-primary-rgb: 229, 9, 20;
        --theme-border-color: #303030;
        --theme-success: #10B981;
        --theme-error: var(--theme-accent-primary);
        --sidebar-width: 260px;
        --header-height: 70px;
        --transition-speed: 0.3s;
        --border-radius: 8px;
    }
    /* TEMA CLARO */
    body.light-theme {
        --theme-bg-primary: #f0f2f5;
        --theme-bg-secondary: #ffffff;
        --theme-bg-tertiary: #e9eef2;
        --theme-text-primary: #1c1c1c;
        --theme-text-secondary: #555555;
        --theme-border-color: #d1d8e0;
        --theme-success: #059669;
    }
    *, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
    html { scroll-behavior: smooth; }
    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--theme-bg-primary);
        color: var(--theme-text-primary);
        display: flex;
        height: 100vh;
        overflow: hidden;
        transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
    }

    /* --- SIDEBAR SOFISTICADA E RESPONSIVA --- */
    .admin-sidebar {
        width: var(--sidebar-width);
        background-color: var(--theme-bg-secondary);
        border-right: 1px solid var(--theme-border-color);
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        padding: 1.5rem 1rem;
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        z-index: 1000;
        transition: transform var(--transition-speed) ease, background-color var(--transition-speed) ease, border-color var(--transition-speed) ease;
    }
    .sidebar-header { margin-bottom: 2.5rem; text-align: center; }
    .sidebar-logo { display: flex; align-items: center; justify-content: center; gap: 0.8rem; text-decoration: none; color: var(--theme-text-primary); font-size: 1.6rem; font-weight: 700; }
    .sidebar-logo img { height: 45px; transition: transform var(--transition-speed) ease; }
    .sidebar-logo:hover img { transform: rotate(-15deg) scale(1.1); }
    .admin-nav { flex-grow: 1; overflow-y: auto; }
    .admin-nav ul { list-style: none; }
    .admin-nav li { margin-bottom: 0.5rem; }
    .admin-nav .nav-link { display: flex; align-items: center; gap: 1rem; padding: 1rem; text-decoration: none; color: var(--theme-text-secondary); font-weight: 500; border-radius: var(--border-radius); transition: all var(--transition-speed) ease; }
    .admin-nav .nav-link:hover { background-color: var(--theme-bg-tertiary); color: var(--theme-text-primary); }
    .admin-nav .nav-link.active { background-color: var(--theme-accent-primary); color: white; font-weight: 600; }
    .admin-nav .nav-link .fa-fw { width: 25px; text-align: center; }
    .sidebar-footer { margin-top: auto; display: flex; flex-direction: column; gap: 0.8rem; flex-shrink: 0; }

    /* --- CONTEÚDO PRINCIPAL --- */
    .admin-main-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        height: 100vh;
        transition: margin-left var(--transition-speed) ease;
        margin-left: var(--sidebar-width);
        width: calc(100% - var(--sidebar-width));
    }
    .main-content-header {
        padding: 0 2rem;
        height: var(--header-height);
        background-color: var(--theme-bg-secondary);
        border-bottom: 1px solid var(--theme-border-color);
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-shrink: 0;
    }
    .main-content-header h1 { font-size: 1.8rem; display: flex; align-items: center; gap: 1rem; }
    .sidebar-toggle-btn { display: none; background: none; border: none; color: var(--theme-text-primary); font-size: 1.5rem; cursor: pointer; }
    .main-content-body { padding: 2rem; overflow-y: auto; flex-grow: 1; position: relative; }
    .admin-panel { display: none; }
    .admin-panel.active { display: block; animation: fadeIn 0.5s forwards; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }

    /* --- COMPONENTES GERAIS DO PAINEL --- */
    .btn { padding: 0.8rem 1.5rem; border-radius: var(--border-radius); border: 1px solid var(--theme-border-color); font-weight: 600; cursor: pointer; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; background-color: transparent; color: var(--theme-text-primary); transition: all var(--transition-speed); text-transform: uppercase; letter-spacing: 1px; }
    .btn:hover { border-color: var(--theme-accent-primary); color: var(--theme-accent-primary); transform: translateY(-2px); }
    .btn:disabled { opacity: 0.4; cursor: not-allowed; transform: none; }
    .btn--primary { background-color: var(--theme-accent-primary); border-color: var(--theme-accent-primary); color: white; }
    .btn--primary:hover { background-color: #B80710; border-color: #B80710; }
    .btn--small { padding: 0.5rem 1rem; font-size: 0.8rem; }
    .loading-spinner { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 4rem; color: var(--theme-accent-primary); display: none; z-index: 2000; }
    .main-content-body.loading > * { filter: blur(4px); pointer-events: none; }
    .main-content-body.loading .loading-spinner { display: block; }
    #toast-notification { position: fixed; bottom: 2rem; right: 2rem; background-color: var(--theme-bg-tertiary); padding: 1rem 1.5rem; border-radius: var(--border-radius); z-index: 9999; border-left: 6px solid; opacity: 0; transition: all 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55); transform: translateX(120%); box-shadow: 0 5px 15px rgba(0,0,0,0.5); font-weight: 500; }
    #toast-notification.show { opacity: 1; transform: translateX(0); }
    #toast-notification.success { border-left-color: var(--theme-success); }
    #toast-notification.error { border-left-color: var(--theme-error); }
    .table-container { overflow-x: auto; }
    .users-table { width: 100%; border-collapse: collapse; }
    .users-table th, .users-table td { padding: 1rem; text-align: left; border-bottom: 1px solid var(--theme-border-color); }
    .users-table thead { background-color: var(--theme-bg-tertiary); }
    .users-table th { font-weight: 600; text-transform: uppercase; font-size: 0.8rem; color: var(--theme-text-secondary); }
    .users-table tbody tr:hover { background-color: var(--theme-bg-tertiary); }
    .user-info { display: flex; align-items: center; gap: 1rem; }
    .user-avatar { width: 40px; height: 40px; border-radius: 50%; object-fit: cover; }
    .user-role-badge { padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.8rem; font-weight: 600; text-transform: capitalize; }
    .user-role-badge.admin { background-color: var(--theme-accent-primary); color: white; }
    .user-role-badge.user { background-color: var(--theme-bg-tertiary); color: var(--theme-text-secondary); }
    .actions-dropdown { position: relative; }
    .actions-dropdown .dropdown-menu { display: none; position: absolute; top: calc(100% + 5px); right: 0; background-color: var(--theme-bg-secondary); min-width: 200px; box-shadow: 0 8px 30px rgba(0,0,0,0.6); z-index: 100; border-radius: var(--border-radius); border: 1px solid var(--theme-border-color); padding: 0.5rem; }
    .actions-dropdown .dropdown-menu.show { display: block; }
    .dropdown-item { color: var(--theme-text-secondary); padding: 0.75rem 1rem; text-decoration: none; display: flex; align-items: center; gap: 0.75rem; transition: all var(--transition-speed); border-radius: var(--border-radius); cursor: pointer; background: none; border: none; width: 100%; text-align: left; font-size: 0.9rem; }
    .dropdown-item:hover { background-color: var(--theme-accent-primary); color: white; }

    /* RESPONSIVIDADE DO PAINEL */
    @media (max-width: 1024px) {
        .admin-sidebar { transform: translateX(-100%); }
        .admin-sidebar.open { transform: translateX(0); box-shadow: 10px 0 30px rgba(0,0,0,0.3); }
        .admin-main-content { margin-left: 0; width: 100%; }
        .sidebar-toggle-btn { display: block; }
    }
    
    /* PRESERVAÇÃO: Estilos dos formulários e grids de itens intactos */
    .admin-form-container { padding: 2.5rem; background-color: var(--theme-bg-secondary); border-radius: var(--border-radius); max-width: 800px; margin: 1rem auto; border: 1px solid var(--theme-border-color); }
    .form-group { margin-bottom: 1.5rem; }
    .form-group label { display: block; margin-bottom: 0.6rem; font-weight: 500; text-transform: uppercase; font-size: 0.9rem; color: var(--theme-text-secondary); }
    .input, .textarea, .select { width: 100%; background-color: var(--theme-bg-primary); border: 1px solid var(--theme-border-color); color: var(--theme-text-primary); padding: 0.8rem 1rem; border-radius: var(--border-radius); font-size: 1rem; }
    .input:focus, .textarea:focus, .select:focus { outline: none; border-color: var(--theme-accent-primary); box-shadow: 0 0 0 3px rgba(var(--theme-accent-primary-rgb), 0.3); }
    .items-grid { display: grid; gap: 1.5rem; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); }
    .item-card { background-color: var(--theme-bg-secondary); border: 1px solid var(--theme-border-color); border-radius: var(--border-radius); overflow: hidden; display: flex; flex-direction: column; }
    .item-card:hover { transform: translateY(-5px); border-color: var(--theme-accent-primary); }
    .item-card__image-link { display: block; height: 320px; overflow: hidden; }
    .item-card__image { width: 100%; height: 100%; object-fit: cover; }
    .item-card__content { padding: 1rem; flex-grow: 1; }
    .item-card__title { font-size: 1.1rem; font-weight: 600; margin-bottom: 0.5rem; }
    .item-card__actions { display: flex; gap: 0.5rem; padding: 0 1rem 1rem; }
    .episode-manage-list { list-style: none; margin-top: 1.5rem; max-height: 400px; overflow-y: auto; padding: 0.5rem; background-color: var(--theme-bg-primary); border-radius: var(--border-radius); border: 1px solid var(--theme-border-color); }
    .episode-manage-list li { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 1rem; border-bottom: 1px solid var(--theme-border-color); }
    .episode-manage-list li:last-child { border-bottom: none; }
    .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem; }
    .stat-card { background: var(--theme-bg-secondary); padding: 1.5rem; border-radius: var(--border-radius); border: 1px solid var(--theme-border-color); text-align: center; border-bottom: 4px solid var(--theme-accent-primary); }
    .stat-card h3 { font-size: 1.2rem; color: var(--theme-text-secondary); margin-bottom: 0.5rem; }
    .stat-card p { font-size: 2.5rem; font-weight: 700; color: var(--theme-text-primary); }
    </style>
</head>
<body class="dark-theme">
    <aside class="admin-sidebar">
        <div class="sidebar-header">
            <a href="/admin/dashboard" class="sidebar-logo">
                <img src="/images/1.ico" alt="Logo Akatsuki">
                <span>Painel</span>
            </a>
        </div>
        <nav class="admin-nav">
            <ul>
                <li><a class="nav-link active" href="#" data-target="panel-dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Visão Geral</a></li>
                <li><a class="nav-link" href="#" data-target="panel-animes"><i class="fas fa-film fa-fw"></i> Animes</a></li>
                <li><a class="nav-link" href="#" data-target="panel-posts"><i class="fas fa-newspaper fa-fw"></i> Notícias</a></li>
                <li><a class="nav-link" href="#" data-target="panel-users"><i class="fas fa-users fa-fw"></i> Usuários</a></li>
            </ul>
        </nav>
        <div class="sidebar-footer">
            <button id="theme-toggle-btn" class="btn btn--secondary" title="Alternar Tema"><i class="fas fa-sun"></i><span class="theme-text"> / </span><i class="fas fa-moon"></i></button>
            <a href="/" target="_blank" class="btn">Ver Site</a>
            <a href="/auth/logout" class="btn btn--primary">Sair</a>
        </div>
    </aside>

    <div id="overlay" style="display:none; position:fixed; inset:0; background:rgba(0,0,0,0.5); z-index:999;"></div>

    <main class="admin-main-content">
        <header class="main-content-header">
            <button class="sidebar-toggle-btn" id="sidebar-toggle"><i class="fas fa-bars"></i></button>
            <h1 id="main-header-title"><i class="fas fa-tachometer-alt fa-fw"></i> Visão Geral</h1>
        </header>
        <div class="main-content-body">
            <div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div>
            
            <div id="panel-dashboard" class="admin-panel active">
                <div class="stats-grid">
                    <div class="stat-card"><h3>Animes</h3><p><%= totalAnimes %></p></div>
                    <div class="stat-card"><h3>Notícias</h3><p><%= totalPosts %></p></div>
                    <div class="stat-card"><h3>Usuários</h3><p><%= totalUsers %></p></div>
                </div>
            </div>
            <div id="panel-animes" class="admin-panel"></div>
            <div id="panel-posts" class="admin-panel"></div>
            <div id="panel-users" class="admin-panel">
                <div class="table-container">
                    <table class="users-table">
                        <thead><tr><th>Usuário</th><th>Email</th><th>Cargo</th><th>Membro Desde</th><th>Ações</th></tr></thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>
    
    <div id="toast-notification"></div>
    
    <!-- ======================================================= -->
    <!-- |       SEUS TEMPLATES ORIGINAIS - 100% PRESERVADOS   | -->
    <!-- ======================================================= -->
    <template id="template-list-view"><div style="margin-bottom: 1.5rem;"><button class="btn-show-form btn btn--primary"><i class="fas fa-plus-circle"></i> Adicionar Novo</button></div><div class="items-grid"></div></template>
    <template id="template-anime-form"><div class="admin-form-container"><h2 class="form-title">Adicionar Anime</h2><form id="main-form" enctype="multipart/form-data"><input type="hidden" name="currentSlug"><div class="form-group"><label for="titulo">Título</label><input type="text" name="titulo" id="titulo" class="input" required></div><div class="form-group"><label for="sinopse">Sinopse</label><textarea name="sinopse" id="sinopse" class="textarea" rows="5" required></textarea></div><div class="form-group"><label for="anoLancamento">Ano</label><input type="number" name="anoLancamento" id="anoLancamento" class="input" required></div><div class="form-group"><label for="generos">Gêneros (separados por vírgula)</label><input type="text" name="generos" id="generos" class="input" required></div><div class="form-group"><label for="fileCapa">Capa (Upload)</label><input type="file" name="file" id="fileCapa" class="input" accept="image/*"></div><div class="form-group"><label for="classificacao">Nota</label><input type="number" step="0.1" name="classificacao" id="classificacao" class="input"></div><div style="display: flex; gap: 1rem; margin-top: 1.5rem;"><button type="submit" class="btn btn--primary">Salvar</button><button type="button" class="btn-cancel btn">Cancelar</button></div></form></div></template>
    <template id="template-episode-manager"><div class="admin-form-container"><h2 class="form-title-episodes">Gerenciar Episódios</h2><form id="episode-add-form" enctype="multipart/form-data" style="margin-bottom: 2rem; border-bottom: 1px solid var(--theme-border-color); padding-bottom: 2rem;"><input type="hidden" name="animeId"><h4>Adicionar Novo Episódio</h4><div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-top:1rem;"><div class="form-group"><label for="temporada">Temporada</label><input type="number" name="temporada" id="temporada" class="input" required value="1"></div><div class="form-group"><label for="numero">Número</label><input type="number" name="numero" id="numero" class="input" required></div></div><div class="form-group"><label for="tituloEp">Título (opcional)</label><input type="text" name="titulo" id="tituloEp" class="input"></div><div class="form-group"><label for="tipoVideo"><i class="fas fa-link"></i> Fonte do Vídeo</label><select name="tipoVideo" id="tipoVideo" class="select"><option value="upload">Upload do Dispositivo</option><option value="gdrive">Link do Google Drive</option><option value="mega">Link do Mega</option><option value="mediafire">Link do MediaFire</option><option value="iframe">Link de iFrame/Embed</option></select></div><div class="form-group" id="ep-url-group"><label for="urlVideo" id="url-label">URL do Vídeo</label><input type="text" name="urlVideo" id="urlVideo" class="input" placeholder="Cole o link de compartilhamento aqui"></div><div class="form-group" id="ep-upload-group" style="display: none;"><label for="fileVideo">Arquivo de Vídeo</label><input type="file" name="file" id="fileVideo" class="input" accept="video/mp4,video/mkv,video/x-matroska"></div><button type="submit" class="btn btn--primary btn--small">Adicionar Episódio</button></form><h4>Episódios Existentes</h4><ul class="episode-manage-list"></ul><button type="button" class="btn-cancel btn" style="margin-top: 1.5rem;"><i class="fas fa-arrow-left"></i> Voltar</button></div></template>
    <template id="template-post-form"><div class="admin-form-container"><h2 class="form-title">Adicionar Notícia</h2><form id="main-form" enctype="multipart/form-data"><input type="hidden" name="id"><div class="form-group"><label for="tituloNoticia">Título</label><input type="text" name="titulo" id="tituloNoticia" class="input" required></div><div class="form-group"><label for="conteudo">Conteúdo</label><textarea name="conteudo" id="conteudo" class="textarea" rows="10" required></textarea></div><div class="form-group"><label for="imagemDestaque">URL da Imagem de Destaque</label><input type="text" name="imagemDestaque" id="imagemDestaque" class="input"></div><div class="form-group" style="display:flex;align-items:center;gap:10px"><input type="checkbox" name="emDestaque" id="emDestaque" style="width:auto;height:auto"><label for="emDestaque" style="margin:0;">Notícia em Destaque</label></div><div style="display: flex; gap: 1rem; margin-top: 1.5rem;"><button type="submit" class="btn btn--primary">Salvar</button><button type="button" class="btn-cancel btn">Cancelar</button></div></form></div></template>

    <script>
    // ================================================================================================== //
    // |       JAVASCRIPT COMPLETO E FINAL - LÓGICA ORIGINAL RESTAURADA E INTEGRADA AO NOVO DESIGN        | //
    // ================================================================================================== //
    document.addEventListener('DOMContentLoaded', function() {
        const adminApp = {
            // DOM SELECTORS: Agora inclui os novos elementos de UI
            dom: {
                mainContentBody: document.querySelector('.main-content-body'),
                navLinks: document.querySelectorAll('.admin-nav .nav-link'),
                headerTitle: document.getElementById('main-header-title'),
                toast: document.getElementById('toast-notification'),
                spinner: document.querySelector('.loading-spinner'),
                sidebar: document.querySelector('.admin-sidebar'),
                sidebarToggle: document.getElementById('sidebar-toggle'),
                overlay: document.getElementById('overlay'),
                themeToggleButton: document.getElementById('theme-toggle-btn'),
            },
            // STATE: Preservado
            state: {
                isEditing: false, editingId: null, currentView: 'list', currentPanel: 'dashboard',
            },
            // INIT: Agora inicializa os novos listeners e o tema
            init() {
                this.initEventListeners();
                this.initTheme();
                const initialPanel = window.location.hash.replace('#', '') || 'dashboard';
                const initialLink = document.querySelector(`.nav-link[data-target="panel-${initialPanel}"]`);
                if (initialLink) { initialLink.click(); }
            },
            // EVENT LISTENERS: Centralizados
            initEventListeners() {
                this.dom.navLinks.forEach(link => link.addEventListener('click', e => this.handleNavClick(e)));
                this.dom.sidebarToggle.addEventListener('click', () => this.toggleSidebar());
                this.dom.overlay.addEventListener('click', () => this.toggleSidebar());
                this.dom.themeToggleButton.addEventListener('click', () => this.toggleTheme());
                document.getElementById('panel-users').addEventListener('click', e => this.handleUserActions(e));
                window.addEventListener('click', e => { if (!e.target.closest('.actions-dropdown')) { document.querySelectorAll('.dropdown-menu.show').forEach(m => m.classList.remove('show')); } });
            },
            // [NOVO] LÓGICA DE TEMA
            initTheme() {
                const savedTheme = localStorage.getItem('adminTheme') || 'dark';
                document.body.className = savedTheme + '-theme';
            },
            toggleTheme() {
                const isDark = document.body.classList.contains('dark-theme');
                document.body.className = isDark ? 'light-theme' : 'dark-theme';
                localStorage.setItem('adminTheme', isDark ? 'light' : 'dark');
            },
            // [NOVO] LÓGICA DA SIDEBAR RESPONSIVA
            toggleSidebar() {
                this.dom.sidebar.classList.toggle('open');
                this.dom.overlay.style.display = this.dom.sidebar.classList.contains('open') ? 'block' : 'none';
            },
            // NAVEGAÇÃO: Adaptada para o novo design
            async handleNavClick(e) {
                e.preventDefault();
                const targetPanelId = e.currentTarget.dataset.target;
                if (window.innerWidth < 1024) this.toggleSidebar();
                this.dom.navLinks.forEach(l => l.classList.remove('active'));
                e.currentTarget.classList.add('active');
                document.querySelectorAll('.admin-panel').forEach(p => p.classList.remove('active'));
                document.getElementById(targetPanelId).classList.add('active');
                this.dom.headerTitle.innerHTML = e.currentTarget.innerHTML;
                this.state.currentPanel = targetPanelId.replace('panel-', '');
                window.location.hash = this.state.currentPanel;
                
                switch (this.state.currentPanel) {
                    case 'animes': this.renderListView('animes'); break;
                    case 'posts': this.renderListView('posts'); break;
                    case 'users': this.renderUsersPanel(); break;
                }
            },
            // [NOVO] LÓGICA PARA RENDERIZAR PAINEL DE USUÁRIOS
            async renderUsersPanel() {
                const result = await this.apiCall('users');
                const tableBody = document.querySelector('#panel-users tbody');
                if (!tableBody) return;
                tableBody.innerHTML = '';
                if (result.success && result.data.length > 0) {
                    result.data.forEach(user => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `<td><div class="user-info"><img src="${user.avatar || '/images/default-avatar.png'}" alt="Avatar" class="user-avatar"><div><strong>${user.nome}</strong><div style="font-size:0.8rem;color:var(--theme-text-secondary);">ID: ${user.id}</div></div></div></td><td>${user.email}</td><td><span class="user-role-badge ${user.role}">${user.role}</span></td><td>${new Date(user.createdAt).toLocaleDateString('pt-BR')}</td><td><div class="actions-dropdown"><button class="btn btn--small actions-toggle"><i class="fas fa-ellipsis-h"></i></button><div class="dropdown-menu"><a href="/perfil/${user.id}" target="_blank" class="dropdown-item"><i class="fas fa-eye fa-fw"></i> Ver Perfil</a><button class="dropdown-item btn-delete-user" data-id="${user.id}"><i class="fas fa-trash fa-fw"></i> Excluir</button></div></div></td>`;
                        tableBody.appendChild(tr);
                    });
                } else {
                    tableBody.innerHTML = `<tr><td colspan="5" style="text-align:center;">${result.error || 'Nenhum usuário encontrado.'}</td></tr>`;
                }
            },
            handleUserActions(e) {
                const toggle = e.target.closest('.actions-toggle');
                if (toggle) {
                    const menu = toggle.closest('.actions-dropdown').querySelector('.dropdown-menu');
                    document.querySelectorAll('.dropdown-menu.show').forEach(m => m !== menu && m.classList.remove('show'));
                    menu.classList.toggle('show');
                }
                const deleteBtn = e.target.closest('.btn-delete-user');
                if (deleteBtn) {
                    const id = deleteBtn.dataset.id;
                    this.handleDelete('users', id);
                }
            },

            // =======================================================
            // |   SUA LÓGICA ORIGINAL - RESTAURADA 100% INTACTA     |
            // =======================================================
            showToast(message, type = 'success') { this.dom.toast.textContent = message; this.dom.toast.className = `show ${type}`; setTimeout(() => { this.dom.toast.className = this.dom.toast.className.replace('show', ''); }, 4000); },
            setLoading(isLoading) { this.dom.mainContentBody.classList.toggle('loading', isLoading); },
            async apiCall(endpoint, options = {}) { this.setLoading(true); try { const fetchOptions = { ...options }; if (!(fetchOptions.body instanceof FormData)) { fetchOptions.headers = { 'Content-Type': 'application/json', ...fetchOptions.headers }; if (fetchOptions.body) { fetchOptions.body = JSON.stringify(fetchOptions.body); } } const response = await fetch(`/api/${endpoint}`, fetchOptions); const data = await response.json(); if (!response.ok) { throw new Error(data.error || `Erro ${response.status}: ${response.statusText}`); } return data; } catch (err) { console.error('API Call Error:', err); this.showToast(err.message, 'error'); return { success: false, error: err.message }; } finally { this.setLoading(false); } },
            renderView(panelId, templateId) { const panel = document.getElementById(panelId); const template = document.getElementById(templateId); if (panel && template) panel.innerHTML = template.innerHTML; },
            async renderListView(type) { const panelId = `panel-${type}`; this.renderView(panelId, 'template-list-view'); const panel = document.getElementById(panelId); panel.querySelector('.btn-show-form').addEventListener('click', () => this.renderFormView(type, false)); const result = await this.apiCall(type); if (!result.success) return; const grid = panel.querySelector('.items-grid'); grid.innerHTML = ''; if (!result.data || result.data.length === 0) { grid.innerHTML = '<p>Nenhum item encontrado.</p>'; return; } if (type === 'animes') this.populateAnimeGrid(grid, result.data); if (type === 'posts') this.populatePostGrid(grid, result.data); },
            async renderFormView(type, isEditing, id = null) { this.state.isEditing = isEditing; this.state.editingId = id; const panelId = `panel-${type}`; const panel = document.getElementById(panelId); const formTemplateId = type === 'animes' ? 'template-anime-form' : 'template-post-form'; this.renderView(panelId, formTemplateId); const form = panel.querySelector('#main-form'); const title = panel.querySelector('.form-title'); panel.querySelector('.btn-cancel').addEventListener('click', () => this.renderListView(type)); if (isEditing) { title.textContent = `Editar ${type === 'animes' ? 'Anime' : 'Notícia'}`; const endpoint = type === 'animes' ? `animes/${id}` : `posts/slug/${id}`; const { data } = await this.apiCall(endpoint); if (data) { for (const key in data) { const input = form.querySelector(`[name="${key}"]`); if (input) { if (input.type === 'checkbox') input.checked = data[key]; else input.value = Array.isArray(data[key]) ? data[key].join(', ') : data[key]; } } if (type === 'animes') form.querySelector('[name="currentSlug"]').value = data.slug; if (type === 'posts') form.querySelector('[name="id"]').value = data.id; } } form.addEventListener('submit', (e) => this.handleFormSubmit(e, type)); },
            populateAnimeGrid(grid, data) { data.forEach(anime => { const card = document.createElement('div'); card.className = 'item-card'; card.dataset.slug = anime.slug; card.innerHTML = `<a href="/anime/${anime.slug}" target="_blank" class="item-card__image-link"><img src="${anime.imagemCapa || '/images/placeholder_poster.png'}" class="item-card__image" alt="Capa de ${anime.titulo}"></a><div class="item-card__content"><h3 class="item-card__title">${anime.titulo}</h3></div><div class="item-card__actions"><button class="btn-edit btn btn--small"><i class="fas fa-edit"></i> Editar</button><button class="btn-episodes btn btn--small"><i class="fas fa-list-ol"></i> Eps</button><button class="btn-delete btn btn--small"><i class="fas fa-trash"></i></button></div>`; card.querySelector('.btn-edit').addEventListener('click', () => this.renderFormView('animes', true, anime.slug)); card.querySelector('.btn-episodes').addEventListener('click', () => this.renderEpisodeManager(anime.slug)); card.querySelector('.btn-delete').addEventListener('click', () => this.handleDelete('animes', anime.slug)); grid.appendChild(card); }); },
            populatePostGrid(grid, data) { data.forEach(post => { const card = document.createElement('div'); card.className = 'item-card'; card.dataset.slug = post.slug; card.dataset.id = post.id; card.innerHTML = `<a href="/noticias/${post.slug}" target="_blank" class="item-card__image-link"><img src="${post.imagemDestaque || '/images/placeholder_poster.png'}" class="item-card__image" alt="Destaque de ${post.titulo}"></a><div class="item-card__content"><h3 class="item-card__title">${post.titulo}</h3></div><div class="item-card__actions"><button class="btn-edit btn btn--small"><i class="fas fa-edit"></i> Editar</button><button class="btn-delete btn btn--small"><i class="fas fa-trash"></i></button></div>`; card.querySelector('.btn-edit').addEventListener('click', () => this.renderFormView('posts', true, post.slug)); card.querySelector('.btn-delete').addEventListener('click', () => this.handleDelete('posts', post.id)); grid.appendChild(card); }); },
            async handleFormSubmit(e, type) { e.preventDefault(); const form = e.target; const formObject = Object.fromEntries(new FormData(form).entries()); if (type === 'animes') { const fileInput = form.querySelector('#fileCapa'); if (fileInput && fileInput.files[0]) { const uploadFormData = new FormData(); uploadFormData.append('file', fileInput.files[0]); this.showToast('Enviando capa...', 'info'); const uploadResult = await this.apiCall('upload/capa', { method: 'POST', body: uploadFormData }); if (uploadResult && uploadResult.success) { formObject.imagemCapa = uploadResult.filePath; } else { this.showToast('Falha ao enviar a imagem da capa. Verifique o console.', 'error'); return; } } } let endpoint = type; let method = 'POST'; if (this.state.isEditing) { const id = this.state.editingId; endpoint = `${type}/${id}`; method = 'PUT'; } const result = await this.apiCall(endpoint, { method, body: formObject }); if (result.success) { this.showToast(`${type === 'animes' ? 'Anime' : 'Notícia'} salvo com sucesso!`); this.renderListView(type); } },
            async handleDelete(type, id) { if (!confirm('Tem certeza que deseja deletar este item? A ação não pode ser desfeita.')) return; const result = await this.apiCall(`${type}/${id}`, { method: 'DELETE' }); if (result.success) { this.showToast('Item deletado com sucesso.'); if (type === 'users') { this.renderUsersPanel(); } else { this.renderListView(type); } } },
            async renderEpisodeManager(animeSlug) { const panel = document.getElementById('panel-animes'); this.renderView('panel-animes', 'template-episode-manager'); panel.querySelector('.btn-cancel').addEventListener('click', () => this.renderListView('animes')); const { data: anime } = await this.apiCall(`animes/${animeSlug}`); if (!anime) return; panel.querySelector('.form-title-episodes').textContent = `Episódios de: ${anime.titulo}`; const form = panel.querySelector('#episode-add-form'); form.querySelector('[name="animeId"]').value = anime.id; const list = panel.querySelector('.episode-manage-list'); list.innerHTML = ''; const sortedEpisodes = (anime.episodios || []).sort((a,b) => a.temporada - b.temporada || a.numero - b.numero); if (sortedEpisodes.length === 0) { list.innerHTML = '<li>Nenhum episódio cadastrado.</li>'; } else { sortedEpisodes.forEach(ep => { const li = document.createElement('li'); li.dataset.id = ep.id; li.innerHTML = `<span>T${ep.temporada} E${ep.numero} - ${ep.titulo || 'Sem título'}</span><button class="btn-delete-ep btn btn--small btn--primary"><i class="fas fa-trash"></i></button>`; li.querySelector('.btn-delete-ep').addEventListener('click', async () => { if(!confirm('Deletar episódio?')) return; const res = await this.apiCall(`episodios/${ep.id}`, {method: 'DELETE'}); if(res.success) { this.showToast('Episódio deletado'); this.renderEpisodeManager(animeSlug); } }); list.appendChild(li); }); } const typeSelect = form.querySelector('#tipoVideo'); const urlGroup = form.querySelector('#ep-url-group'); const uploadGroup = form.querySelector('#ep-upload-group'); const urlInput = form.querySelector('#urlVideo'); const fileInput = form.querySelector('#fileVideo'); typeSelect.addEventListener('change', () => { const selectedValue = typeSelect.value; if (selectedValue === 'upload') { uploadGroup.style.display = 'block'; urlGroup.style.display = 'none'; fileInput.required = true; urlInput.required = false; } else { uploadGroup.style.display = 'none'; urlGroup.style.display = 'block'; fileInput.required = false; urlInput.required = true; } }); typeSelect.dispatchEvent(new Event('change')); form.addEventListener('submit', async e => { e.preventDefault(); const formData = new FormData(form); const result = await this.apiCall('episodios', { method: 'POST', body: formData }); if(result.success){ this.showToast('Episódio adicionado!'); this.renderEpisodeManager(animeSlug); } }); }
        };

        adminApp.init();
    });
    </script>
</body>
</html>